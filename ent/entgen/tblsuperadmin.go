// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"rr-backend/ent/entgen/tblsuperadmin"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblSuperAdmin is the model entity for the TblSuperAdmin schema.
type TblSuperAdmin struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy *string `json:"CreatedBy,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy *string `json:"UpdatedBy,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy *string `json:"DeletedBy,omitempty"`
	// IP holds the value of the "Ip" field.
	IP *string `json:"Ip,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent *string `json:"UserAgent,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// DeletedAt holds the value of the "DeletedAt" field.
	DeletedAt *time.Time `json:"DeletedAt,omitempty"`
	// UserName holds the value of the "UserName" field.
	UserName string `json:"UserName,omitempty"`
	// PassWord holds the value of the "PassWord" field.
	PassWord     string `json:"PassWord,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblSuperAdmin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblsuperadmin.FieldID, tblsuperadmin.FieldCreatedBy, tblsuperadmin.FieldUpdatedBy, tblsuperadmin.FieldDeletedBy, tblsuperadmin.FieldIP, tblsuperadmin.FieldUserAgent, tblsuperadmin.FieldUserName, tblsuperadmin.FieldPassWord:
			values[i] = new(sql.NullString)
		case tblsuperadmin.FieldCreatedAt, tblsuperadmin.FieldUpdatedAt, tblsuperadmin.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblSuperAdmin fields.
func (tsa *TblSuperAdmin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblsuperadmin.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tsa.ID = value.String
			}
		case tblsuperadmin.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				tsa.CreatedBy = new(string)
				*tsa.CreatedBy = value.String
			}
		case tblsuperadmin.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				tsa.UpdatedBy = new(string)
				*tsa.UpdatedBy = value.String
			}
		case tblsuperadmin.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				tsa.DeletedBy = new(string)
				*tsa.DeletedBy = value.String
			}
		case tblsuperadmin.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Ip", values[i])
			} else if value.Valid {
				tsa.IP = new(string)
				*tsa.IP = value.String
			}
		case tblsuperadmin.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				tsa.UserAgent = new(string)
				*tsa.UserAgent = value.String
			}
		case tblsuperadmin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				tsa.CreatedAt = value.Time
			}
		case tblsuperadmin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				tsa.UpdatedAt = value.Time
			}
		case tblsuperadmin.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedAt", values[i])
			} else if value.Valid {
				tsa.DeletedAt = new(time.Time)
				*tsa.DeletedAt = value.Time
			}
		case tblsuperadmin.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserName", values[i])
			} else if value.Valid {
				tsa.UserName = value.String
			}
		case tblsuperadmin.FieldPassWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PassWord", values[i])
			} else if value.Valid {
				tsa.PassWord = value.String
			}
		default:
			tsa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblSuperAdmin.
// This includes values selected through modifiers, order, etc.
func (tsa *TblSuperAdmin) Value(name string) (ent.Value, error) {
	return tsa.selectValues.Get(name)
}

// Update returns a builder for updating this TblSuperAdmin.
// Note that you need to call TblSuperAdmin.Unwrap() before calling this method if this TblSuperAdmin
// was returned from a transaction, and the transaction was committed or rolled back.
func (tsa *TblSuperAdmin) Update() *TblSuperAdminUpdateOne {
	return NewTblSuperAdminClient(tsa.config).UpdateOne(tsa)
}

// Unwrap unwraps the TblSuperAdmin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tsa *TblSuperAdmin) Unwrap() *TblSuperAdmin {
	_tx, ok := tsa.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblSuperAdmin is not a transactional entity")
	}
	tsa.config.driver = _tx.drv
	return tsa
}

// String implements the fmt.Stringer.
func (tsa *TblSuperAdmin) String() string {
	var builder strings.Builder
	builder.WriteString("TblSuperAdmin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tsa.ID))
	if v := tsa.CreatedBy; v != nil {
		builder.WriteString("CreatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tsa.UpdatedBy; v != nil {
		builder.WriteString("UpdatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tsa.DeletedBy; v != nil {
		builder.WriteString("DeletedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tsa.IP; v != nil {
		builder.WriteString("Ip=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tsa.UserAgent; v != nil {
		builder.WriteString("UserAgent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(tsa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(tsa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tsa.DeletedAt; v != nil {
		builder.WriteString("DeletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("UserName=")
	builder.WriteString(tsa.UserName)
	builder.WriteString(", ")
	builder.WriteString("PassWord=")
	builder.WriteString(tsa.PassWord)
	builder.WriteByte(')')
	return builder.String()
}

// TblSuperAdmins is a parsable slice of TblSuperAdmin.
type TblSuperAdmins []*TblSuperAdmin
