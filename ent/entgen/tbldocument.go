// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"rr-backend/ent/entgen/tbldocument"
	"rr-backend/ent/entgen/tblgarageowner"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblDocument is the model entity for the TblDocument schema.
type TblDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy *string `json:"CreatedBy,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy *string `json:"UpdatedBy,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy *string `json:"DeletedBy,omitempty"`
	// IP holds the value of the "IP" field.
	IP *string `json:"IP,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent *string `json:"UserAgent,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// DeletedAt holds the value of the "DeletedAt" field.
	DeletedAt *time.Time `json:"DeletedAt,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// RelativePath holds the value of the "RelativePath" field.
	RelativePath string `json:"RelativePath,omitempty"`
	// URL holds the value of the "URL" field.
	URL string `json:"URL,omitempty"`
	// SizeInBytes holds the value of the "SizeInBytes" field.
	SizeInBytes float64 `json:"SizeInBytes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblDocumentQuery when eager-loading is set.
	Edges        TblDocumentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblDocumentEdges holds the relations/edges for other nodes in the graph.
type TblDocumentEdges struct {
	// Photo holds the value of the Photo edge.
	Photo *TblGarageOwner `json:"Photo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PhotoOrErr returns the Photo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblDocumentEdges) PhotoOrErr() (*TblGarageOwner, error) {
	if e.Photo != nil {
		return e.Photo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tblgarageowner.Label}
	}
	return nil, &NotLoadedError{edge: "Photo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblDocument) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tbldocument.FieldSizeInBytes:
			values[i] = new(sql.NullFloat64)
		case tbldocument.FieldID, tbldocument.FieldCreatedBy, tbldocument.FieldUpdatedBy, tbldocument.FieldDeletedBy, tbldocument.FieldIP, tbldocument.FieldUserAgent, tbldocument.FieldName, tbldocument.FieldRelativePath, tbldocument.FieldURL:
			values[i] = new(sql.NullString)
		case tbldocument.FieldCreatedAt, tbldocument.FieldUpdatedAt, tbldocument.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblDocument fields.
func (td *TblDocument) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tbldocument.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				td.ID = value.String
			}
		case tbldocument.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				td.CreatedBy = new(string)
				*td.CreatedBy = value.String
			}
		case tbldocument.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				td.UpdatedBy = new(string)
				*td.UpdatedBy = value.String
			}
		case tbldocument.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				td.DeletedBy = new(string)
				*td.DeletedBy = value.String
			}
		case tbldocument.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IP", values[i])
			} else if value.Valid {
				td.IP = new(string)
				*td.IP = value.String
			}
		case tbldocument.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				td.UserAgent = new(string)
				*td.UserAgent = value.String
			}
		case tbldocument.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				td.CreatedAt = value.Time
			}
		case tbldocument.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				td.UpdatedAt = value.Time
			}
		case tbldocument.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedAt", values[i])
			} else if value.Valid {
				td.DeletedAt = new(time.Time)
				*td.DeletedAt = value.Time
			}
		case tbldocument.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				td.Name = value.String
			}
		case tbldocument.FieldRelativePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RelativePath", values[i])
			} else if value.Valid {
				td.RelativePath = value.String
			}
		case tbldocument.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field URL", values[i])
			} else if value.Valid {
				td.URL = value.String
			}
		case tbldocument.FieldSizeInBytes:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field SizeInBytes", values[i])
			} else if value.Valid {
				td.SizeInBytes = value.Float64
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblDocument.
// This includes values selected through modifiers, order, etc.
func (td *TblDocument) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// QueryPhoto queries the "Photo" edge of the TblDocument entity.
func (td *TblDocument) QueryPhoto() *TblGarageOwnerQuery {
	return NewTblDocumentClient(td.config).QueryPhoto(td)
}

// Update returns a builder for updating this TblDocument.
// Note that you need to call TblDocument.Unwrap() before calling this method if this TblDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TblDocument) Update() *TblDocumentUpdateOne {
	return NewTblDocumentClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TblDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TblDocument) Unwrap() *TblDocument {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblDocument is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TblDocument) String() string {
	var builder strings.Builder
	builder.WriteString("TblDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	if v := td.CreatedBy; v != nil {
		builder.WriteString("CreatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := td.UpdatedBy; v != nil {
		builder.WriteString("UpdatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := td.DeletedBy; v != nil {
		builder.WriteString("DeletedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := td.IP; v != nil {
		builder.WriteString("IP=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := td.UserAgent; v != nil {
		builder.WriteString("UserAgent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(td.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(td.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := td.DeletedAt; v != nil {
		builder.WriteString("DeletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(td.Name)
	builder.WriteString(", ")
	builder.WriteString("RelativePath=")
	builder.WriteString(td.RelativePath)
	builder.WriteString(", ")
	builder.WriteString("URL=")
	builder.WriteString(td.URL)
	builder.WriteString(", ")
	builder.WriteString("SizeInBytes=")
	builder.WriteString(fmt.Sprintf("%v", td.SizeInBytes))
	builder.WriteByte(')')
	return builder.String()
}

// TblDocuments is a parsable slice of TblDocument.
type TblDocuments []*TblDocument
