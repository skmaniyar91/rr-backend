// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"rr-backend/ent/entgen/predicate"
	"rr-backend/ent/entgen/tbladdress"
	"rr-backend/ent/entgen/tblgarageowner"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAddressQuery is the builder for querying TblAddress entities.
type TblAddressQuery struct {
	config
	ctx              *QueryContext
	order            []tbladdress.OrderOption
	inters           []Interceptor
	predicates       []predicate.TblAddress
	withOwnerAddress *TblGarageOwnerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TblAddressQuery builder.
func (taq *TblAddressQuery) Where(ps ...predicate.TblAddress) *TblAddressQuery {
	taq.predicates = append(taq.predicates, ps...)
	return taq
}

// Limit the number of records to be returned by this query.
func (taq *TblAddressQuery) Limit(limit int) *TblAddressQuery {
	taq.ctx.Limit = &limit
	return taq
}

// Offset to start from.
func (taq *TblAddressQuery) Offset(offset int) *TblAddressQuery {
	taq.ctx.Offset = &offset
	return taq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (taq *TblAddressQuery) Unique(unique bool) *TblAddressQuery {
	taq.ctx.Unique = &unique
	return taq
}

// Order specifies how the records should be ordered.
func (taq *TblAddressQuery) Order(o ...tbladdress.OrderOption) *TblAddressQuery {
	taq.order = append(taq.order, o...)
	return taq
}

// QueryOwnerAddress chains the current query on the "OwnerAddress" edge.
func (taq *TblAddressQuery) QueryOwnerAddress() *TblGarageOwnerQuery {
	query := (&TblGarageOwnerClient{config: taq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tbladdress.Table, tbladdress.FieldID, selector),
			sqlgraph.To(tblgarageowner.Table, tblgarageowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, tbladdress.OwnerAddressTable, tbladdress.OwnerAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TblAddress entity from the query.
// Returns a *NotFoundError when no TblAddress was found.
func (taq *TblAddressQuery) First(ctx context.Context) (*TblAddress, error) {
	nodes, err := taq.Limit(1).All(setContextOp(ctx, taq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tbladdress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (taq *TblAddressQuery) FirstX(ctx context.Context) *TblAddress {
	node, err := taq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TblAddress ID from the query.
// Returns a *NotFoundError when no TblAddress ID was found.
func (taq *TblAddressQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = taq.Limit(1).IDs(setContextOp(ctx, taq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tbladdress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (taq *TblAddressQuery) FirstIDX(ctx context.Context) string {
	id, err := taq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TblAddress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TblAddress entity is found.
// Returns a *NotFoundError when no TblAddress entities are found.
func (taq *TblAddressQuery) Only(ctx context.Context) (*TblAddress, error) {
	nodes, err := taq.Limit(2).All(setContextOp(ctx, taq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tbladdress.Label}
	default:
		return nil, &NotSingularError{tbladdress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (taq *TblAddressQuery) OnlyX(ctx context.Context) *TblAddress {
	node, err := taq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TblAddress ID in the query.
// Returns a *NotSingularError when more than one TblAddress ID is found.
// Returns a *NotFoundError when no entities are found.
func (taq *TblAddressQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = taq.Limit(2).IDs(setContextOp(ctx, taq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tbladdress.Label}
	default:
		err = &NotSingularError{tbladdress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (taq *TblAddressQuery) OnlyIDX(ctx context.Context) string {
	id, err := taq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TblAddresses.
func (taq *TblAddressQuery) All(ctx context.Context) ([]*TblAddress, error) {
	ctx = setContextOp(ctx, taq.ctx, "All")
	if err := taq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TblAddress, *TblAddressQuery]()
	return withInterceptors[[]*TblAddress](ctx, taq, qr, taq.inters)
}

// AllX is like All, but panics if an error occurs.
func (taq *TblAddressQuery) AllX(ctx context.Context) []*TblAddress {
	nodes, err := taq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TblAddress IDs.
func (taq *TblAddressQuery) IDs(ctx context.Context) (ids []string, err error) {
	if taq.ctx.Unique == nil && taq.path != nil {
		taq.Unique(true)
	}
	ctx = setContextOp(ctx, taq.ctx, "IDs")
	if err = taq.Select(tbladdress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (taq *TblAddressQuery) IDsX(ctx context.Context) []string {
	ids, err := taq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (taq *TblAddressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, taq.ctx, "Count")
	if err := taq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, taq, querierCount[*TblAddressQuery](), taq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (taq *TblAddressQuery) CountX(ctx context.Context) int {
	count, err := taq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (taq *TblAddressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, taq.ctx, "Exist")
	switch _, err := taq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (taq *TblAddressQuery) ExistX(ctx context.Context) bool {
	exist, err := taq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TblAddressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (taq *TblAddressQuery) Clone() *TblAddressQuery {
	if taq == nil {
		return nil
	}
	return &TblAddressQuery{
		config:           taq.config,
		ctx:              taq.ctx.Clone(),
		order:            append([]tbladdress.OrderOption{}, taq.order...),
		inters:           append([]Interceptor{}, taq.inters...),
		predicates:       append([]predicate.TblAddress{}, taq.predicates...),
		withOwnerAddress: taq.withOwnerAddress.Clone(),
		// clone intermediate query.
		sql:  taq.sql.Clone(),
		path: taq.path,
	}
}

// WithOwnerAddress tells the query-builder to eager-load the nodes that are connected to
// the "OwnerAddress" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TblAddressQuery) WithOwnerAddress(opts ...func(*TblGarageOwnerQuery)) *TblAddressQuery {
	query := (&TblGarageOwnerClient{config: taq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	taq.withOwnerAddress = query
	return taq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedBy string `json:"CreatedBy,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TblAddress.Query().
//		GroupBy(tbladdress.FieldCreatedBy).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
func (taq *TblAddressQuery) GroupBy(field string, fields ...string) *TblAddressGroupBy {
	taq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TblAddressGroupBy{build: taq}
	grbuild.flds = &taq.ctx.Fields
	grbuild.label = tbladdress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedBy string `json:"CreatedBy,omitempty"`
//	}
//
//	client.TblAddress.Query().
//		Select(tbladdress.FieldCreatedBy).
//		Scan(ctx, &v)
func (taq *TblAddressQuery) Select(fields ...string) *TblAddressSelect {
	taq.ctx.Fields = append(taq.ctx.Fields, fields...)
	sbuild := &TblAddressSelect{TblAddressQuery: taq}
	sbuild.label = tbladdress.Label
	sbuild.flds, sbuild.scan = &taq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TblAddressSelect configured with the given aggregations.
func (taq *TblAddressQuery) Aggregate(fns ...AggregateFunc) *TblAddressSelect {
	return taq.Select().Aggregate(fns...)
}

func (taq *TblAddressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range taq.inters {
		if inter == nil {
			return fmt.Errorf("entgen: uninitialized interceptor (forgotten import entgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, taq); err != nil {
				return err
			}
		}
	}
	for _, f := range taq.ctx.Fields {
		if !tbladdress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if taq.path != nil {
		prev, err := taq.path(ctx)
		if err != nil {
			return err
		}
		taq.sql = prev
	}
	return nil
}

func (taq *TblAddressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TblAddress, error) {
	var (
		nodes       = []*TblAddress{}
		_spec       = taq.querySpec()
		loadedTypes = [1]bool{
			taq.withOwnerAddress != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TblAddress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TblAddress{config: taq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, taq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := taq.withOwnerAddress; query != nil {
		if err := taq.loadOwnerAddress(ctx, query, nodes, nil,
			func(n *TblAddress, e *TblGarageOwner) { n.Edges.OwnerAddress = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (taq *TblAddressQuery) loadOwnerAddress(ctx context.Context, query *TblGarageOwnerQuery, nodes []*TblAddress, init func(*TblAddress), assign func(*TblAddress, *TblGarageOwner)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblAddress)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblgarageowner.FieldAddressIdUlid)
	}
	query.Where(predicate.TblGarageOwner(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tbladdress.OwnerAddressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AddressIdUlid
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "AddressId_ulid" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (taq *TblAddressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := taq.querySpec()
	_spec.Node.Columns = taq.ctx.Fields
	if len(taq.ctx.Fields) > 0 {
		_spec.Unique = taq.ctx.Unique != nil && *taq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, taq.driver, _spec)
}

func (taq *TblAddressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tbladdress.Table, tbladdress.Columns, sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString))
	_spec.From = taq.sql
	if unique := taq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if taq.path != nil {
		_spec.Unique = true
	}
	if fields := taq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbladdress.FieldID)
		for i := range fields {
			if fields[i] != tbladdress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := taq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := taq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := taq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := taq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (taq *TblAddressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(taq.driver.Dialect())
	t1 := builder.Table(tbladdress.Table)
	columns := taq.ctx.Fields
	if len(columns) == 0 {
		columns = tbladdress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if taq.sql != nil {
		selector = taq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if taq.ctx.Unique != nil && *taq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range taq.predicates {
		p(selector)
	}
	for _, p := range taq.order {
		p(selector)
	}
	if offset := taq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := taq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TblAddressGroupBy is the group-by builder for TblAddress entities.
type TblAddressGroupBy struct {
	selector
	build *TblAddressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tagb *TblAddressGroupBy) Aggregate(fns ...AggregateFunc) *TblAddressGroupBy {
	tagb.fns = append(tagb.fns, fns...)
	return tagb
}

// Scan applies the selector query and scans the result into the given value.
func (tagb *TblAddressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tagb.build.ctx, "GroupBy")
	if err := tagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAddressQuery, *TblAddressGroupBy](ctx, tagb.build, tagb, tagb.build.inters, v)
}

func (tagb *TblAddressGroupBy) sqlScan(ctx context.Context, root *TblAddressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tagb.fns))
	for _, fn := range tagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tagb.flds)+len(tagb.fns))
		for _, f := range *tagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TblAddressSelect is the builder for selecting fields of TblAddress entities.
type TblAddressSelect struct {
	*TblAddressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tas *TblAddressSelect) Aggregate(fns ...AggregateFunc) *TblAddressSelect {
	tas.fns = append(tas.fns, fns...)
	return tas
}

// Scan applies the selector query and scans the result into the given value.
func (tas *TblAddressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tas.ctx, "Select")
	if err := tas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAddressQuery, *TblAddressSelect](ctx, tas.TblAddressQuery, tas, tas.inters, v)
}

func (tas *TblAddressSelect) sqlScan(ctx context.Context, root *TblAddressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tas.fns))
	for _, fn := range tas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
