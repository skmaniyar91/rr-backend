// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/predicate"
	"rr-backend/ent/entgen/tblenum"
	"rr-backend/ent/entgen/tblgarageowner"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblEnumUpdate is the builder for updating TblEnum entities.
type TblEnumUpdate struct {
	config
	hooks    []Hook
	mutation *TblEnumMutation
}

// Where appends a list predicates to the TblEnumUpdate builder.
func (teu *TblEnumUpdate) Where(ps ...predicate.TblEnum) *TblEnumUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetCreatedBy sets the "CreatedBy" field.
func (teu *TblEnumUpdate) SetCreatedBy(s string) *TblEnumUpdate {
	teu.mutation.SetCreatedBy(s)
	return teu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableCreatedBy(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetCreatedBy(*s)
	}
	return teu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (teu *TblEnumUpdate) ClearCreatedBy() *TblEnumUpdate {
	teu.mutation.ClearCreatedBy()
	return teu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (teu *TblEnumUpdate) SetUpdatedBy(s string) *TblEnumUpdate {
	teu.mutation.SetUpdatedBy(s)
	return teu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableUpdatedBy(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetUpdatedBy(*s)
	}
	return teu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (teu *TblEnumUpdate) ClearUpdatedBy() *TblEnumUpdate {
	teu.mutation.ClearUpdatedBy()
	return teu
}

// SetDeletedBy sets the "DeletedBy" field.
func (teu *TblEnumUpdate) SetDeletedBy(s string) *TblEnumUpdate {
	teu.mutation.SetDeletedBy(s)
	return teu
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableDeletedBy(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetDeletedBy(*s)
	}
	return teu
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (teu *TblEnumUpdate) ClearDeletedBy() *TblEnumUpdate {
	teu.mutation.ClearDeletedBy()
	return teu
}

// SetIP sets the "IP" field.
func (teu *TblEnumUpdate) SetIP(s string) *TblEnumUpdate {
	teu.mutation.SetIP(s)
	return teu
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableIP(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetIP(*s)
	}
	return teu
}

// ClearIP clears the value of the "IP" field.
func (teu *TblEnumUpdate) ClearIP() *TblEnumUpdate {
	teu.mutation.ClearIP()
	return teu
}

// SetUserAgent sets the "UserAgent" field.
func (teu *TblEnumUpdate) SetUserAgent(s string) *TblEnumUpdate {
	teu.mutation.SetUserAgent(s)
	return teu
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableUserAgent(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetUserAgent(*s)
	}
	return teu
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (teu *TblEnumUpdate) ClearUserAgent() *TblEnumUpdate {
	teu.mutation.ClearUserAgent()
	return teu
}

// SetCreatedAt sets the "CreatedAt" field.
func (teu *TblEnumUpdate) SetCreatedAt(t time.Time) *TblEnumUpdate {
	teu.mutation.SetCreatedAt(t)
	return teu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableCreatedAt(t *time.Time) *TblEnumUpdate {
	if t != nil {
		teu.SetCreatedAt(*t)
	}
	return teu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (teu *TblEnumUpdate) SetUpdatedAt(t time.Time) *TblEnumUpdate {
	teu.mutation.SetUpdatedAt(t)
	return teu
}

// SetDeletedAt sets the "DeletedAt" field.
func (teu *TblEnumUpdate) SetDeletedAt(t time.Time) *TblEnumUpdate {
	teu.mutation.SetDeletedAt(t)
	return teu
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableDeletedAt(t *time.Time) *TblEnumUpdate {
	if t != nil {
		teu.SetDeletedAt(*t)
	}
	return teu
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (teu *TblEnumUpdate) ClearDeletedAt() *TblEnumUpdate {
	teu.mutation.ClearDeletedAt()
	return teu
}

// SetCode sets the "Code" field.
func (teu *TblEnumUpdate) SetCode(s string) *TblEnumUpdate {
	teu.mutation.SetCode(s)
	return teu
}

// SetNillableCode sets the "Code" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableCode(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetCode(*s)
	}
	return teu
}

// SetCodeType sets the "CodeType" field.
func (teu *TblEnumUpdate) SetCodeType(s string) *TblEnumUpdate {
	teu.mutation.SetCodeType(s)
	return teu
}

// SetNillableCodeType sets the "CodeType" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableCodeType(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetCodeType(*s)
	}
	return teu
}

// SetDisplayText sets the "DisplayText" field.
func (teu *TblEnumUpdate) SetDisplayText(s string) *TblEnumUpdate {
	teu.mutation.SetDisplayText(s)
	return teu
}

// SetNillableDisplayText sets the "DisplayText" field if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableDisplayText(s *string) *TblEnumUpdate {
	if s != nil {
		teu.SetDisplayText(*s)
	}
	return teu
}

// SetInitialEnumID sets the "InitialEnum" edge to the TblGarageOwner entity by ID.
func (teu *TblEnumUpdate) SetInitialEnumID(id string) *TblEnumUpdate {
	teu.mutation.SetInitialEnumID(id)
	return teu
}

// SetNillableInitialEnumID sets the "InitialEnum" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (teu *TblEnumUpdate) SetNillableInitialEnumID(id *string) *TblEnumUpdate {
	if id != nil {
		teu = teu.SetInitialEnumID(*id)
	}
	return teu
}

// SetInitialEnum sets the "InitialEnum" edge to the TblGarageOwner entity.
func (teu *TblEnumUpdate) SetInitialEnum(t *TblGarageOwner) *TblEnumUpdate {
	return teu.SetInitialEnumID(t.ID)
}

// Mutation returns the TblEnumMutation object of the builder.
func (teu *TblEnumUpdate) Mutation() *TblEnumMutation {
	return teu.mutation
}

// ClearInitialEnum clears the "InitialEnum" edge to the TblGarageOwner entity.
func (teu *TblEnumUpdate) ClearInitialEnum() *TblEnumUpdate {
	teu.mutation.ClearInitialEnum()
	return teu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TblEnumUpdate) Save(ctx context.Context) (int, error) {
	if err := teu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TblEnumUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TblEnumUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TblEnumUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TblEnumUpdate) defaults() error {
	if _, ok := teu.mutation.UpdatedAt(); !ok {
		if tblenum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblenum.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tblenum.UpdateDefaultUpdatedAt()
		teu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (teu *TblEnumUpdate) check() error {
	if v, ok := teu.mutation.CreatedBy(); ok {
		if err := tblenum.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.CreatedBy": %w`, err)}
		}
	}
	if v, ok := teu.mutation.UpdatedBy(); ok {
		if err := tblenum.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := teu.mutation.DeletedBy(); ok {
		if err := tblenum.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.DeletedBy": %w`, err)}
		}
	}
	if v, ok := teu.mutation.Code(); ok {
		if err := tblenum.CodeValidator(v); err != nil {
			return &ValidationError{Name: "Code", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.Code": %w`, err)}
		}
	}
	if v, ok := teu.mutation.CodeType(); ok {
		if err := tblenum.CodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "CodeType", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.CodeType": %w`, err)}
		}
	}
	if v, ok := teu.mutation.DisplayText(); ok {
		if err := tblenum.DisplayTextValidator(v); err != nil {
			return &ValidationError{Name: "DisplayText", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.DisplayText": %w`, err)}
		}
	}
	return nil
}

func (teu *TblEnumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := teu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblenum.Table, tblenum.Columns, sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.CreatedBy(); ok {
		_spec.SetField(tblenum.FieldCreatedBy, field.TypeString, value)
	}
	if teu.mutation.CreatedByCleared() {
		_spec.ClearField(tblenum.FieldCreatedBy, field.TypeString)
	}
	if value, ok := teu.mutation.UpdatedBy(); ok {
		_spec.SetField(tblenum.FieldUpdatedBy, field.TypeString, value)
	}
	if teu.mutation.UpdatedByCleared() {
		_spec.ClearField(tblenum.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := teu.mutation.DeletedBy(); ok {
		_spec.SetField(tblenum.FieldDeletedBy, field.TypeString, value)
	}
	if teu.mutation.DeletedByCleared() {
		_spec.ClearField(tblenum.FieldDeletedBy, field.TypeString)
	}
	if value, ok := teu.mutation.IP(); ok {
		_spec.SetField(tblenum.FieldIP, field.TypeString, value)
	}
	if teu.mutation.IPCleared() {
		_spec.ClearField(tblenum.FieldIP, field.TypeString)
	}
	if value, ok := teu.mutation.UserAgent(); ok {
		_spec.SetField(tblenum.FieldUserAgent, field.TypeString, value)
	}
	if teu.mutation.UserAgentCleared() {
		_spec.ClearField(tblenum.FieldUserAgent, field.TypeString)
	}
	if value, ok := teu.mutation.CreatedAt(); ok {
		_spec.SetField(tblenum.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teu.mutation.UpdatedAt(); ok {
		_spec.SetField(tblenum.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := teu.mutation.DeletedAt(); ok {
		_spec.SetField(tblenum.FieldDeletedAt, field.TypeTime, value)
	}
	if teu.mutation.DeletedAtCleared() {
		_spec.ClearField(tblenum.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := teu.mutation.Code(); ok {
		_spec.SetField(tblenum.FieldCode, field.TypeString, value)
	}
	if value, ok := teu.mutation.CodeType(); ok {
		_spec.SetField(tblenum.FieldCodeType, field.TypeString, value)
	}
	if value, ok := teu.mutation.DisplayText(); ok {
		_spec.SetField(tblenum.FieldDisplayText, field.TypeString, value)
	}
	if teu.mutation.InitialEnumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tblenum.InitialEnumTable,
			Columns: []string{tblenum.InitialEnumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.InitialEnumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tblenum.InitialEnumTable,
			Columns: []string{tblenum.InitialEnumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TblEnumUpdateOne is the builder for updating a single TblEnum entity.
type TblEnumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblEnumMutation
}

// SetCreatedBy sets the "CreatedBy" field.
func (teuo *TblEnumUpdateOne) SetCreatedBy(s string) *TblEnumUpdateOne {
	teuo.mutation.SetCreatedBy(s)
	return teuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableCreatedBy(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetCreatedBy(*s)
	}
	return teuo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (teuo *TblEnumUpdateOne) ClearCreatedBy() *TblEnumUpdateOne {
	teuo.mutation.ClearCreatedBy()
	return teuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (teuo *TblEnumUpdateOne) SetUpdatedBy(s string) *TblEnumUpdateOne {
	teuo.mutation.SetUpdatedBy(s)
	return teuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableUpdatedBy(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetUpdatedBy(*s)
	}
	return teuo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (teuo *TblEnumUpdateOne) ClearUpdatedBy() *TblEnumUpdateOne {
	teuo.mutation.ClearUpdatedBy()
	return teuo
}

// SetDeletedBy sets the "DeletedBy" field.
func (teuo *TblEnumUpdateOne) SetDeletedBy(s string) *TblEnumUpdateOne {
	teuo.mutation.SetDeletedBy(s)
	return teuo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableDeletedBy(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetDeletedBy(*s)
	}
	return teuo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (teuo *TblEnumUpdateOne) ClearDeletedBy() *TblEnumUpdateOne {
	teuo.mutation.ClearDeletedBy()
	return teuo
}

// SetIP sets the "IP" field.
func (teuo *TblEnumUpdateOne) SetIP(s string) *TblEnumUpdateOne {
	teuo.mutation.SetIP(s)
	return teuo
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableIP(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetIP(*s)
	}
	return teuo
}

// ClearIP clears the value of the "IP" field.
func (teuo *TblEnumUpdateOne) ClearIP() *TblEnumUpdateOne {
	teuo.mutation.ClearIP()
	return teuo
}

// SetUserAgent sets the "UserAgent" field.
func (teuo *TblEnumUpdateOne) SetUserAgent(s string) *TblEnumUpdateOne {
	teuo.mutation.SetUserAgent(s)
	return teuo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableUserAgent(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetUserAgent(*s)
	}
	return teuo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (teuo *TblEnumUpdateOne) ClearUserAgent() *TblEnumUpdateOne {
	teuo.mutation.ClearUserAgent()
	return teuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (teuo *TblEnumUpdateOne) SetCreatedAt(t time.Time) *TblEnumUpdateOne {
	teuo.mutation.SetCreatedAt(t)
	return teuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableCreatedAt(t *time.Time) *TblEnumUpdateOne {
	if t != nil {
		teuo.SetCreatedAt(*t)
	}
	return teuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (teuo *TblEnumUpdateOne) SetUpdatedAt(t time.Time) *TblEnumUpdateOne {
	teuo.mutation.SetUpdatedAt(t)
	return teuo
}

// SetDeletedAt sets the "DeletedAt" field.
func (teuo *TblEnumUpdateOne) SetDeletedAt(t time.Time) *TblEnumUpdateOne {
	teuo.mutation.SetDeletedAt(t)
	return teuo
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableDeletedAt(t *time.Time) *TblEnumUpdateOne {
	if t != nil {
		teuo.SetDeletedAt(*t)
	}
	return teuo
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (teuo *TblEnumUpdateOne) ClearDeletedAt() *TblEnumUpdateOne {
	teuo.mutation.ClearDeletedAt()
	return teuo
}

// SetCode sets the "Code" field.
func (teuo *TblEnumUpdateOne) SetCode(s string) *TblEnumUpdateOne {
	teuo.mutation.SetCode(s)
	return teuo
}

// SetNillableCode sets the "Code" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableCode(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetCode(*s)
	}
	return teuo
}

// SetCodeType sets the "CodeType" field.
func (teuo *TblEnumUpdateOne) SetCodeType(s string) *TblEnumUpdateOne {
	teuo.mutation.SetCodeType(s)
	return teuo
}

// SetNillableCodeType sets the "CodeType" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableCodeType(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetCodeType(*s)
	}
	return teuo
}

// SetDisplayText sets the "DisplayText" field.
func (teuo *TblEnumUpdateOne) SetDisplayText(s string) *TblEnumUpdateOne {
	teuo.mutation.SetDisplayText(s)
	return teuo
}

// SetNillableDisplayText sets the "DisplayText" field if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableDisplayText(s *string) *TblEnumUpdateOne {
	if s != nil {
		teuo.SetDisplayText(*s)
	}
	return teuo
}

// SetInitialEnumID sets the "InitialEnum" edge to the TblGarageOwner entity by ID.
func (teuo *TblEnumUpdateOne) SetInitialEnumID(id string) *TblEnumUpdateOne {
	teuo.mutation.SetInitialEnumID(id)
	return teuo
}

// SetNillableInitialEnumID sets the "InitialEnum" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (teuo *TblEnumUpdateOne) SetNillableInitialEnumID(id *string) *TblEnumUpdateOne {
	if id != nil {
		teuo = teuo.SetInitialEnumID(*id)
	}
	return teuo
}

// SetInitialEnum sets the "InitialEnum" edge to the TblGarageOwner entity.
func (teuo *TblEnumUpdateOne) SetInitialEnum(t *TblGarageOwner) *TblEnumUpdateOne {
	return teuo.SetInitialEnumID(t.ID)
}

// Mutation returns the TblEnumMutation object of the builder.
func (teuo *TblEnumUpdateOne) Mutation() *TblEnumMutation {
	return teuo.mutation
}

// ClearInitialEnum clears the "InitialEnum" edge to the TblGarageOwner entity.
func (teuo *TblEnumUpdateOne) ClearInitialEnum() *TblEnumUpdateOne {
	teuo.mutation.ClearInitialEnum()
	return teuo
}

// Where appends a list predicates to the TblEnumUpdate builder.
func (teuo *TblEnumUpdateOne) Where(ps ...predicate.TblEnum) *TblEnumUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TblEnumUpdateOne) Select(field string, fields ...string) *TblEnumUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TblEnum entity.
func (teuo *TblEnumUpdateOne) Save(ctx context.Context) (*TblEnum, error) {
	if err := teuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TblEnumUpdateOne) SaveX(ctx context.Context) *TblEnum {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TblEnumUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TblEnumUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TblEnumUpdateOne) defaults() error {
	if _, ok := teuo.mutation.UpdatedAt(); !ok {
		if tblenum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblenum.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tblenum.UpdateDefaultUpdatedAt()
		teuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (teuo *TblEnumUpdateOne) check() error {
	if v, ok := teuo.mutation.CreatedBy(); ok {
		if err := tblenum.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.CreatedBy": %w`, err)}
		}
	}
	if v, ok := teuo.mutation.UpdatedBy(); ok {
		if err := tblenum.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := teuo.mutation.DeletedBy(); ok {
		if err := tblenum.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.DeletedBy": %w`, err)}
		}
	}
	if v, ok := teuo.mutation.Code(); ok {
		if err := tblenum.CodeValidator(v); err != nil {
			return &ValidationError{Name: "Code", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.Code": %w`, err)}
		}
	}
	if v, ok := teuo.mutation.CodeType(); ok {
		if err := tblenum.CodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "CodeType", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.CodeType": %w`, err)}
		}
	}
	if v, ok := teuo.mutation.DisplayText(); ok {
		if err := tblenum.DisplayTextValidator(v); err != nil {
			return &ValidationError{Name: "DisplayText", err: fmt.Errorf(`entgen: validator failed for field "TblEnum.DisplayText": %w`, err)}
		}
	}
	return nil
}

func (teuo *TblEnumUpdateOne) sqlSave(ctx context.Context) (_node *TblEnum, err error) {
	if err := teuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblenum.Table, tblenum.Columns, sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblEnum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblenum.FieldID)
		for _, f := range fields {
			if !tblenum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblenum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.CreatedBy(); ok {
		_spec.SetField(tblenum.FieldCreatedBy, field.TypeString, value)
	}
	if teuo.mutation.CreatedByCleared() {
		_spec.ClearField(tblenum.FieldCreatedBy, field.TypeString)
	}
	if value, ok := teuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tblenum.FieldUpdatedBy, field.TypeString, value)
	}
	if teuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tblenum.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := teuo.mutation.DeletedBy(); ok {
		_spec.SetField(tblenum.FieldDeletedBy, field.TypeString, value)
	}
	if teuo.mutation.DeletedByCleared() {
		_spec.ClearField(tblenum.FieldDeletedBy, field.TypeString)
	}
	if value, ok := teuo.mutation.IP(); ok {
		_spec.SetField(tblenum.FieldIP, field.TypeString, value)
	}
	if teuo.mutation.IPCleared() {
		_spec.ClearField(tblenum.FieldIP, field.TypeString)
	}
	if value, ok := teuo.mutation.UserAgent(); ok {
		_spec.SetField(tblenum.FieldUserAgent, field.TypeString, value)
	}
	if teuo.mutation.UserAgentCleared() {
		_spec.ClearField(tblenum.FieldUserAgent, field.TypeString)
	}
	if value, ok := teuo.mutation.CreatedAt(); ok {
		_spec.SetField(tblenum.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblenum.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := teuo.mutation.DeletedAt(); ok {
		_spec.SetField(tblenum.FieldDeletedAt, field.TypeTime, value)
	}
	if teuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblenum.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := teuo.mutation.Code(); ok {
		_spec.SetField(tblenum.FieldCode, field.TypeString, value)
	}
	if value, ok := teuo.mutation.CodeType(); ok {
		_spec.SetField(tblenum.FieldCodeType, field.TypeString, value)
	}
	if value, ok := teuo.mutation.DisplayText(); ok {
		_spec.SetField(tblenum.FieldDisplayText, field.TypeString, value)
	}
	if teuo.mutation.InitialEnumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tblenum.InitialEnumTable,
			Columns: []string{tblenum.InitialEnumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.InitialEnumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tblenum.InitialEnumTable,
			Columns: []string{tblenum.InitialEnumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblEnum{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblenum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
