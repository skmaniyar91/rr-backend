// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/predicate"
	"rr-backend/ent/entgen/tbladdress"
	"rr-backend/ent/entgen/tbldocument"
	"rr-backend/ent/entgen/tblenum"
	"rr-backend/ent/entgen/tblgarageowner"
	"rr-backend/ent/entgen/tblusers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblGarageOwnerUpdate is the builder for updating TblGarageOwner entities.
type TblGarageOwnerUpdate struct {
	config
	hooks    []Hook
	mutation *TblGarageOwnerMutation
}

// Where appends a list predicates to the TblGarageOwnerUpdate builder.
func (tgou *TblGarageOwnerUpdate) Where(ps ...predicate.TblGarageOwner) *TblGarageOwnerUpdate {
	tgou.mutation.Where(ps...)
	return tgou
}

// SetCreatedBy sets the "CreatedBy" field.
func (tgou *TblGarageOwnerUpdate) SetCreatedBy(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetCreatedBy(s)
	return tgou
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableCreatedBy(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetCreatedBy(*s)
	}
	return tgou
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tgou *TblGarageOwnerUpdate) ClearCreatedBy() *TblGarageOwnerUpdate {
	tgou.mutation.ClearCreatedBy()
	return tgou
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tgou *TblGarageOwnerUpdate) SetUpdatedBy(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetUpdatedBy(s)
	return tgou
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableUpdatedBy(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetUpdatedBy(*s)
	}
	return tgou
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tgou *TblGarageOwnerUpdate) ClearUpdatedBy() *TblGarageOwnerUpdate {
	tgou.mutation.ClearUpdatedBy()
	return tgou
}

// SetDeletedBy sets the "DeletedBy" field.
func (tgou *TblGarageOwnerUpdate) SetDeletedBy(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetDeletedBy(s)
	return tgou
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableDeletedBy(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetDeletedBy(*s)
	}
	return tgou
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tgou *TblGarageOwnerUpdate) ClearDeletedBy() *TblGarageOwnerUpdate {
	tgou.mutation.ClearDeletedBy()
	return tgou
}

// SetIP sets the "IP" field.
func (tgou *TblGarageOwnerUpdate) SetIP(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetIP(s)
	return tgou
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableIP(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetIP(*s)
	}
	return tgou
}

// ClearIP clears the value of the "IP" field.
func (tgou *TblGarageOwnerUpdate) ClearIP() *TblGarageOwnerUpdate {
	tgou.mutation.ClearIP()
	return tgou
}

// SetUserAgent sets the "UserAgent" field.
func (tgou *TblGarageOwnerUpdate) SetUserAgent(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetUserAgent(s)
	return tgou
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableUserAgent(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetUserAgent(*s)
	}
	return tgou
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tgou *TblGarageOwnerUpdate) ClearUserAgent() *TblGarageOwnerUpdate {
	tgou.mutation.ClearUserAgent()
	return tgou
}

// SetCreatedAt sets the "CreatedAt" field.
func (tgou *TblGarageOwnerUpdate) SetCreatedAt(t time.Time) *TblGarageOwnerUpdate {
	tgou.mutation.SetCreatedAt(t)
	return tgou
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableCreatedAt(t *time.Time) *TblGarageOwnerUpdate {
	if t != nil {
		tgou.SetCreatedAt(*t)
	}
	return tgou
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tgou *TblGarageOwnerUpdate) SetUpdatedAt(t time.Time) *TblGarageOwnerUpdate {
	tgou.mutation.SetUpdatedAt(t)
	return tgou
}

// SetDeletedAt sets the "DeletedAt" field.
func (tgou *TblGarageOwnerUpdate) SetDeletedAt(t time.Time) *TblGarageOwnerUpdate {
	tgou.mutation.SetDeletedAt(t)
	return tgou
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableDeletedAt(t *time.Time) *TblGarageOwnerUpdate {
	if t != nil {
		tgou.SetDeletedAt(*t)
	}
	return tgou
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tgou *TblGarageOwnerUpdate) ClearDeletedAt() *TblGarageOwnerUpdate {
	tgou.mutation.ClearDeletedAt()
	return tgou
}

// SetUserIdUlid sets the "UserId_ulid" field.
func (tgou *TblGarageOwnerUpdate) SetUserIdUlid(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetUserIdUlid(s)
	return tgou
}

// SetNillableUserIdUlid sets the "UserId_ulid" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableUserIdUlid(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetUserIdUlid(*s)
	}
	return tgou
}

// ClearUserIdUlid clears the value of the "UserId_ulid" field.
func (tgou *TblGarageOwnerUpdate) ClearUserIdUlid() *TblGarageOwnerUpdate {
	tgou.mutation.ClearUserIdUlid()
	return tgou
}

// SetInitial sets the "Initial" field.
func (tgou *TblGarageOwnerUpdate) SetInitial(i int) *TblGarageOwnerUpdate {
	tgou.mutation.SetInitial(i)
	return tgou
}

// SetNillableInitial sets the "Initial" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableInitial(i *int) *TblGarageOwnerUpdate {
	if i != nil {
		tgou.SetInitial(*i)
	}
	return tgou
}

// ClearInitial clears the value of the "Initial" field.
func (tgou *TblGarageOwnerUpdate) ClearInitial() *TblGarageOwnerUpdate {
	tgou.mutation.ClearInitial()
	return tgou
}

// SetFirstName sets the "FirstName" field.
func (tgou *TblGarageOwnerUpdate) SetFirstName(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetFirstName(s)
	return tgou
}

// SetNillableFirstName sets the "FirstName" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableFirstName(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetFirstName(*s)
	}
	return tgou
}

// SetMiddleName sets the "MiddleName" field.
func (tgou *TblGarageOwnerUpdate) SetMiddleName(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetMiddleName(s)
	return tgou
}

// SetNillableMiddleName sets the "MiddleName" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableMiddleName(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetMiddleName(*s)
	}
	return tgou
}

// ClearMiddleName clears the value of the "MiddleName" field.
func (tgou *TblGarageOwnerUpdate) ClearMiddleName() *TblGarageOwnerUpdate {
	tgou.mutation.ClearMiddleName()
	return tgou
}

// SetLastName sets the "LastName" field.
func (tgou *TblGarageOwnerUpdate) SetLastName(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetLastName(s)
	return tgou
}

// SetNillableLastName sets the "LastName" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableLastName(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetLastName(*s)
	}
	return tgou
}

// SetContactNumber sets the "ContactNumber" field.
func (tgou *TblGarageOwnerUpdate) SetContactNumber(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetContactNumber(s)
	return tgou
}

// SetNillableContactNumber sets the "ContactNumber" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableContactNumber(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetContactNumber(*s)
	}
	return tgou
}

// SetEmail sets the "Email" field.
func (tgou *TblGarageOwnerUpdate) SetEmail(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetEmail(s)
	return tgou
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableEmail(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetEmail(*s)
	}
	return tgou
}

// ClearEmail clears the value of the "Email" field.
func (tgou *TblGarageOwnerUpdate) ClearEmail() *TblGarageOwnerUpdate {
	tgou.mutation.ClearEmail()
	return tgou
}

// SetAge sets the "Age" field.
func (tgou *TblGarageOwnerUpdate) SetAge(i int) *TblGarageOwnerUpdate {
	tgou.mutation.ResetAge()
	tgou.mutation.SetAge(i)
	return tgou
}

// SetNillableAge sets the "Age" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableAge(i *int) *TblGarageOwnerUpdate {
	if i != nil {
		tgou.SetAge(*i)
	}
	return tgou
}

// AddAge adds i to the "Age" field.
func (tgou *TblGarageOwnerUpdate) AddAge(i int) *TblGarageOwnerUpdate {
	tgou.mutation.AddAge(i)
	return tgou
}

// ClearAge clears the value of the "Age" field.
func (tgou *TblGarageOwnerUpdate) ClearAge() *TblGarageOwnerUpdate {
	tgou.mutation.ClearAge()
	return tgou
}

// SetPhotoIdUlid sets the "PhotoId_ulid" field.
func (tgou *TblGarageOwnerUpdate) SetPhotoIdUlid(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetPhotoIdUlid(s)
	return tgou
}

// SetNillablePhotoIdUlid sets the "PhotoId_ulid" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillablePhotoIdUlid(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetPhotoIdUlid(*s)
	}
	return tgou
}

// ClearPhotoIdUlid clears the value of the "PhotoId_ulid" field.
func (tgou *TblGarageOwnerUpdate) ClearPhotoIdUlid() *TblGarageOwnerUpdate {
	tgou.mutation.ClearPhotoIdUlid()
	return tgou
}

// SetAddressIdUlid sets the "AddressId_ulid" field.
func (tgou *TblGarageOwnerUpdate) SetAddressIdUlid(s string) *TblGarageOwnerUpdate {
	tgou.mutation.SetAddressIdUlid(s)
	return tgou
}

// SetNillableAddressIdUlid sets the "AddressId_ulid" field if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableAddressIdUlid(s *string) *TblGarageOwnerUpdate {
	if s != nil {
		tgou.SetAddressIdUlid(*s)
	}
	return tgou
}

// SetUserID sets the "User" edge to the TblUSers entity by ID.
func (tgou *TblGarageOwnerUpdate) SetUserID(id string) *TblGarageOwnerUpdate {
	tgou.mutation.SetUserID(id)
	return tgou
}

// SetNillableUserID sets the "User" edge to the TblUSers entity by ID if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableUserID(id *string) *TblGarageOwnerUpdate {
	if id != nil {
		tgou = tgou.SetUserID(*id)
	}
	return tgou
}

// SetUser sets the "User" edge to the TblUSers entity.
func (tgou *TblGarageOwnerUpdate) SetUser(t *TblUSers) *TblGarageOwnerUpdate {
	return tgou.SetUserID(t.ID)
}

// SetNameInitialID sets the "NameInitial" edge to the TblEnum entity by ID.
func (tgou *TblGarageOwnerUpdate) SetNameInitialID(id int) *TblGarageOwnerUpdate {
	tgou.mutation.SetNameInitialID(id)
	return tgou
}

// SetNillableNameInitialID sets the "NameInitial" edge to the TblEnum entity by ID if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableNameInitialID(id *int) *TblGarageOwnerUpdate {
	if id != nil {
		tgou = tgou.SetNameInitialID(*id)
	}
	return tgou
}

// SetNameInitial sets the "NameInitial" edge to the TblEnum entity.
func (tgou *TblGarageOwnerUpdate) SetNameInitial(t *TblEnum) *TblGarageOwnerUpdate {
	return tgou.SetNameInitialID(t.ID)
}

// SetOwnerPhotoID sets the "OwnerPhoto" edge to the TblDocument entity by ID.
func (tgou *TblGarageOwnerUpdate) SetOwnerPhotoID(id string) *TblGarageOwnerUpdate {
	tgou.mutation.SetOwnerPhotoID(id)
	return tgou
}

// SetNillableOwnerPhotoID sets the "OwnerPhoto" edge to the TblDocument entity by ID if the given value is not nil.
func (tgou *TblGarageOwnerUpdate) SetNillableOwnerPhotoID(id *string) *TblGarageOwnerUpdate {
	if id != nil {
		tgou = tgou.SetOwnerPhotoID(*id)
	}
	return tgou
}

// SetOwnerPhoto sets the "OwnerPhoto" edge to the TblDocument entity.
func (tgou *TblGarageOwnerUpdate) SetOwnerPhoto(t *TblDocument) *TblGarageOwnerUpdate {
	return tgou.SetOwnerPhotoID(t.ID)
}

// SetAddressID sets the "Address" edge to the TblAddress entity by ID.
func (tgou *TblGarageOwnerUpdate) SetAddressID(id string) *TblGarageOwnerUpdate {
	tgou.mutation.SetAddressID(id)
	return tgou
}

// SetAddress sets the "Address" edge to the TblAddress entity.
func (tgou *TblGarageOwnerUpdate) SetAddress(t *TblAddress) *TblGarageOwnerUpdate {
	return tgou.SetAddressID(t.ID)
}

// Mutation returns the TblGarageOwnerMutation object of the builder.
func (tgou *TblGarageOwnerUpdate) Mutation() *TblGarageOwnerMutation {
	return tgou.mutation
}

// ClearUser clears the "User" edge to the TblUSers entity.
func (tgou *TblGarageOwnerUpdate) ClearUser() *TblGarageOwnerUpdate {
	tgou.mutation.ClearUser()
	return tgou
}

// ClearNameInitial clears the "NameInitial" edge to the TblEnum entity.
func (tgou *TblGarageOwnerUpdate) ClearNameInitial() *TblGarageOwnerUpdate {
	tgou.mutation.ClearNameInitial()
	return tgou
}

// ClearOwnerPhoto clears the "OwnerPhoto" edge to the TblDocument entity.
func (tgou *TblGarageOwnerUpdate) ClearOwnerPhoto() *TblGarageOwnerUpdate {
	tgou.mutation.ClearOwnerPhoto()
	return tgou
}

// ClearAddress clears the "Address" edge to the TblAddress entity.
func (tgou *TblGarageOwnerUpdate) ClearAddress() *TblGarageOwnerUpdate {
	tgou.mutation.ClearAddress()
	return tgou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tgou *TblGarageOwnerUpdate) Save(ctx context.Context) (int, error) {
	if err := tgou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tgou.sqlSave, tgou.mutation, tgou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgou *TblGarageOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := tgou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tgou *TblGarageOwnerUpdate) Exec(ctx context.Context) error {
	_, err := tgou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgou *TblGarageOwnerUpdate) ExecX(ctx context.Context) {
	if err := tgou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgou *TblGarageOwnerUpdate) defaults() error {
	if _, ok := tgou.mutation.UpdatedAt(); !ok {
		if tblgarageowner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblgarageowner.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tblgarageowner.UpdateDefaultUpdatedAt()
		tgou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tgou *TblGarageOwnerUpdate) check() error {
	if v, ok := tgou.mutation.CreatedBy(); ok {
		if err := tblgarageowner.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.UpdatedBy(); ok {
		if err := tblgarageowner.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.DeletedBy(); ok {
		if err := tblgarageowner.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.UserIdUlid(); ok {
		if err := tblgarageowner.UserIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "UserId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.UserId_ulid": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.FirstName(); ok {
		if err := tblgarageowner.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "FirstName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.FirstName": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.MiddleName(); ok {
		if err := tblgarageowner.MiddleNameValidator(v); err != nil {
			return &ValidationError{Name: "MiddleName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.MiddleName": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.LastName(); ok {
		if err := tblgarageowner.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "LastName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.LastName": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.ContactNumber(); ok {
		if err := tblgarageowner.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "ContactNumber", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.ContactNumber": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.Email(); ok {
		if err := tblgarageowner.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.Email": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.PhotoIdUlid(); ok {
		if err := tblgarageowner.PhotoIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "PhotoId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.PhotoId_ulid": %w`, err)}
		}
	}
	if v, ok := tgou.mutation.AddressIdUlid(); ok {
		if err := tblgarageowner.AddressIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "AddressId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.AddressId_ulid": %w`, err)}
		}
	}
	if _, ok := tgou.mutation.AddressID(); tgou.mutation.AddressCleared() && !ok {
		return errors.New(`entgen: clearing a required unique edge "TblGarageOwner.Address"`)
	}
	return nil
}

func (tgou *TblGarageOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tgou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblgarageowner.Table, tblgarageowner.Columns, sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString))
	if ps := tgou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgou.mutation.CreatedBy(); ok {
		_spec.SetField(tblgarageowner.FieldCreatedBy, field.TypeString, value)
	}
	if tgou.mutation.CreatedByCleared() {
		_spec.ClearField(tblgarageowner.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tgou.mutation.UpdatedBy(); ok {
		_spec.SetField(tblgarageowner.FieldUpdatedBy, field.TypeString, value)
	}
	if tgou.mutation.UpdatedByCleared() {
		_spec.ClearField(tblgarageowner.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tgou.mutation.DeletedBy(); ok {
		_spec.SetField(tblgarageowner.FieldDeletedBy, field.TypeString, value)
	}
	if tgou.mutation.DeletedByCleared() {
		_spec.ClearField(tblgarageowner.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tgou.mutation.IP(); ok {
		_spec.SetField(tblgarageowner.FieldIP, field.TypeString, value)
	}
	if tgou.mutation.IPCleared() {
		_spec.ClearField(tblgarageowner.FieldIP, field.TypeString)
	}
	if value, ok := tgou.mutation.UserAgent(); ok {
		_spec.SetField(tblgarageowner.FieldUserAgent, field.TypeString, value)
	}
	if tgou.mutation.UserAgentCleared() {
		_spec.ClearField(tblgarageowner.FieldUserAgent, field.TypeString)
	}
	if value, ok := tgou.mutation.CreatedAt(); ok {
		_spec.SetField(tblgarageowner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tgou.mutation.UpdatedAt(); ok {
		_spec.SetField(tblgarageowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tgou.mutation.DeletedAt(); ok {
		_spec.SetField(tblgarageowner.FieldDeletedAt, field.TypeTime, value)
	}
	if tgou.mutation.DeletedAtCleared() {
		_spec.ClearField(tblgarageowner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tgou.mutation.FirstName(); ok {
		_spec.SetField(tblgarageowner.FieldFirstName, field.TypeString, value)
	}
	if value, ok := tgou.mutation.MiddleName(); ok {
		_spec.SetField(tblgarageowner.FieldMiddleName, field.TypeString, value)
	}
	if tgou.mutation.MiddleNameCleared() {
		_spec.ClearField(tblgarageowner.FieldMiddleName, field.TypeString)
	}
	if value, ok := tgou.mutation.LastName(); ok {
		_spec.SetField(tblgarageowner.FieldLastName, field.TypeString, value)
	}
	if value, ok := tgou.mutation.ContactNumber(); ok {
		_spec.SetField(tblgarageowner.FieldContactNumber, field.TypeString, value)
	}
	if value, ok := tgou.mutation.Email(); ok {
		_spec.SetField(tblgarageowner.FieldEmail, field.TypeString, value)
	}
	if tgou.mutation.EmailCleared() {
		_spec.ClearField(tblgarageowner.FieldEmail, field.TypeString)
	}
	if value, ok := tgou.mutation.Age(); ok {
		_spec.SetField(tblgarageowner.FieldAge, field.TypeInt, value)
	}
	if value, ok := tgou.mutation.AddedAge(); ok {
		_spec.AddField(tblgarageowner.FieldAge, field.TypeInt, value)
	}
	if tgou.mutation.AgeCleared() {
		_spec.ClearField(tblgarageowner.FieldAge, field.TypeInt)
	}
	if tgou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.UserTable,
			Columns: []string{tblgarageowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblusers.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.UserTable,
			Columns: []string{tblgarageowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblusers.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgou.mutation.NameInitialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.NameInitialTable,
			Columns: []string{tblgarageowner.NameInitialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgou.mutation.NameInitialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.NameInitialTable,
			Columns: []string{tblgarageowner.NameInitialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgou.mutation.OwnerPhotoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.OwnerPhotoTable,
			Columns: []string{tblgarageowner.OwnerPhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgou.mutation.OwnerPhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.OwnerPhotoTable,
			Columns: []string{tblgarageowner.OwnerPhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgou.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.AddressTable,
			Columns: []string{tblgarageowner.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgou.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.AddressTable,
			Columns: []string{tblgarageowner.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tgou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblgarageowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tgou.mutation.done = true
	return n, nil
}

// TblGarageOwnerUpdateOne is the builder for updating a single TblGarageOwner entity.
type TblGarageOwnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblGarageOwnerMutation
}

// SetCreatedBy sets the "CreatedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) SetCreatedBy(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetCreatedBy(s)
	return tgouo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableCreatedBy(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetCreatedBy(*s)
	}
	return tgouo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearCreatedBy() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearCreatedBy()
	return tgouo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) SetUpdatedBy(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetUpdatedBy(s)
	return tgouo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableUpdatedBy(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetUpdatedBy(*s)
	}
	return tgouo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearUpdatedBy() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearUpdatedBy()
	return tgouo
}

// SetDeletedBy sets the "DeletedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) SetDeletedBy(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetDeletedBy(s)
	return tgouo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableDeletedBy(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetDeletedBy(*s)
	}
	return tgouo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearDeletedBy() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearDeletedBy()
	return tgouo
}

// SetIP sets the "IP" field.
func (tgouo *TblGarageOwnerUpdateOne) SetIP(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetIP(s)
	return tgouo
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableIP(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetIP(*s)
	}
	return tgouo
}

// ClearIP clears the value of the "IP" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearIP() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearIP()
	return tgouo
}

// SetUserAgent sets the "UserAgent" field.
func (tgouo *TblGarageOwnerUpdateOne) SetUserAgent(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetUserAgent(s)
	return tgouo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableUserAgent(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetUserAgent(*s)
	}
	return tgouo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearUserAgent() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearUserAgent()
	return tgouo
}

// SetCreatedAt sets the "CreatedAt" field.
func (tgouo *TblGarageOwnerUpdateOne) SetCreatedAt(t time.Time) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetCreatedAt(t)
	return tgouo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableCreatedAt(t *time.Time) *TblGarageOwnerUpdateOne {
	if t != nil {
		tgouo.SetCreatedAt(*t)
	}
	return tgouo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tgouo *TblGarageOwnerUpdateOne) SetUpdatedAt(t time.Time) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetUpdatedAt(t)
	return tgouo
}

// SetDeletedAt sets the "DeletedAt" field.
func (tgouo *TblGarageOwnerUpdateOne) SetDeletedAt(t time.Time) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetDeletedAt(t)
	return tgouo
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableDeletedAt(t *time.Time) *TblGarageOwnerUpdateOne {
	if t != nil {
		tgouo.SetDeletedAt(*t)
	}
	return tgouo
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearDeletedAt() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearDeletedAt()
	return tgouo
}

// SetUserIdUlid sets the "UserId_ulid" field.
func (tgouo *TblGarageOwnerUpdateOne) SetUserIdUlid(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetUserIdUlid(s)
	return tgouo
}

// SetNillableUserIdUlid sets the "UserId_ulid" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableUserIdUlid(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetUserIdUlid(*s)
	}
	return tgouo
}

// ClearUserIdUlid clears the value of the "UserId_ulid" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearUserIdUlid() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearUserIdUlid()
	return tgouo
}

// SetInitial sets the "Initial" field.
func (tgouo *TblGarageOwnerUpdateOne) SetInitial(i int) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetInitial(i)
	return tgouo
}

// SetNillableInitial sets the "Initial" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableInitial(i *int) *TblGarageOwnerUpdateOne {
	if i != nil {
		tgouo.SetInitial(*i)
	}
	return tgouo
}

// ClearInitial clears the value of the "Initial" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearInitial() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearInitial()
	return tgouo
}

// SetFirstName sets the "FirstName" field.
func (tgouo *TblGarageOwnerUpdateOne) SetFirstName(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetFirstName(s)
	return tgouo
}

// SetNillableFirstName sets the "FirstName" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableFirstName(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetFirstName(*s)
	}
	return tgouo
}

// SetMiddleName sets the "MiddleName" field.
func (tgouo *TblGarageOwnerUpdateOne) SetMiddleName(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetMiddleName(s)
	return tgouo
}

// SetNillableMiddleName sets the "MiddleName" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableMiddleName(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetMiddleName(*s)
	}
	return tgouo
}

// ClearMiddleName clears the value of the "MiddleName" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearMiddleName() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearMiddleName()
	return tgouo
}

// SetLastName sets the "LastName" field.
func (tgouo *TblGarageOwnerUpdateOne) SetLastName(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetLastName(s)
	return tgouo
}

// SetNillableLastName sets the "LastName" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableLastName(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetLastName(*s)
	}
	return tgouo
}

// SetContactNumber sets the "ContactNumber" field.
func (tgouo *TblGarageOwnerUpdateOne) SetContactNumber(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetContactNumber(s)
	return tgouo
}

// SetNillableContactNumber sets the "ContactNumber" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableContactNumber(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetContactNumber(*s)
	}
	return tgouo
}

// SetEmail sets the "Email" field.
func (tgouo *TblGarageOwnerUpdateOne) SetEmail(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetEmail(s)
	return tgouo
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableEmail(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetEmail(*s)
	}
	return tgouo
}

// ClearEmail clears the value of the "Email" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearEmail() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearEmail()
	return tgouo
}

// SetAge sets the "Age" field.
func (tgouo *TblGarageOwnerUpdateOne) SetAge(i int) *TblGarageOwnerUpdateOne {
	tgouo.mutation.ResetAge()
	tgouo.mutation.SetAge(i)
	return tgouo
}

// SetNillableAge sets the "Age" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableAge(i *int) *TblGarageOwnerUpdateOne {
	if i != nil {
		tgouo.SetAge(*i)
	}
	return tgouo
}

// AddAge adds i to the "Age" field.
func (tgouo *TblGarageOwnerUpdateOne) AddAge(i int) *TblGarageOwnerUpdateOne {
	tgouo.mutation.AddAge(i)
	return tgouo
}

// ClearAge clears the value of the "Age" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearAge() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearAge()
	return tgouo
}

// SetPhotoIdUlid sets the "PhotoId_ulid" field.
func (tgouo *TblGarageOwnerUpdateOne) SetPhotoIdUlid(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetPhotoIdUlid(s)
	return tgouo
}

// SetNillablePhotoIdUlid sets the "PhotoId_ulid" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillablePhotoIdUlid(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetPhotoIdUlid(*s)
	}
	return tgouo
}

// ClearPhotoIdUlid clears the value of the "PhotoId_ulid" field.
func (tgouo *TblGarageOwnerUpdateOne) ClearPhotoIdUlid() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearPhotoIdUlid()
	return tgouo
}

// SetAddressIdUlid sets the "AddressId_ulid" field.
func (tgouo *TblGarageOwnerUpdateOne) SetAddressIdUlid(s string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetAddressIdUlid(s)
	return tgouo
}

// SetNillableAddressIdUlid sets the "AddressId_ulid" field if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableAddressIdUlid(s *string) *TblGarageOwnerUpdateOne {
	if s != nil {
		tgouo.SetAddressIdUlid(*s)
	}
	return tgouo
}

// SetUserID sets the "User" edge to the TblUSers entity by ID.
func (tgouo *TblGarageOwnerUpdateOne) SetUserID(id string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetUserID(id)
	return tgouo
}

// SetNillableUserID sets the "User" edge to the TblUSers entity by ID if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableUserID(id *string) *TblGarageOwnerUpdateOne {
	if id != nil {
		tgouo = tgouo.SetUserID(*id)
	}
	return tgouo
}

// SetUser sets the "User" edge to the TblUSers entity.
func (tgouo *TblGarageOwnerUpdateOne) SetUser(t *TblUSers) *TblGarageOwnerUpdateOne {
	return tgouo.SetUserID(t.ID)
}

// SetNameInitialID sets the "NameInitial" edge to the TblEnum entity by ID.
func (tgouo *TblGarageOwnerUpdateOne) SetNameInitialID(id int) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetNameInitialID(id)
	return tgouo
}

// SetNillableNameInitialID sets the "NameInitial" edge to the TblEnum entity by ID if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableNameInitialID(id *int) *TblGarageOwnerUpdateOne {
	if id != nil {
		tgouo = tgouo.SetNameInitialID(*id)
	}
	return tgouo
}

// SetNameInitial sets the "NameInitial" edge to the TblEnum entity.
func (tgouo *TblGarageOwnerUpdateOne) SetNameInitial(t *TblEnum) *TblGarageOwnerUpdateOne {
	return tgouo.SetNameInitialID(t.ID)
}

// SetOwnerPhotoID sets the "OwnerPhoto" edge to the TblDocument entity by ID.
func (tgouo *TblGarageOwnerUpdateOne) SetOwnerPhotoID(id string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetOwnerPhotoID(id)
	return tgouo
}

// SetNillableOwnerPhotoID sets the "OwnerPhoto" edge to the TblDocument entity by ID if the given value is not nil.
func (tgouo *TblGarageOwnerUpdateOne) SetNillableOwnerPhotoID(id *string) *TblGarageOwnerUpdateOne {
	if id != nil {
		tgouo = tgouo.SetOwnerPhotoID(*id)
	}
	return tgouo
}

// SetOwnerPhoto sets the "OwnerPhoto" edge to the TblDocument entity.
func (tgouo *TblGarageOwnerUpdateOne) SetOwnerPhoto(t *TblDocument) *TblGarageOwnerUpdateOne {
	return tgouo.SetOwnerPhotoID(t.ID)
}

// SetAddressID sets the "Address" edge to the TblAddress entity by ID.
func (tgouo *TblGarageOwnerUpdateOne) SetAddressID(id string) *TblGarageOwnerUpdateOne {
	tgouo.mutation.SetAddressID(id)
	return tgouo
}

// SetAddress sets the "Address" edge to the TblAddress entity.
func (tgouo *TblGarageOwnerUpdateOne) SetAddress(t *TblAddress) *TblGarageOwnerUpdateOne {
	return tgouo.SetAddressID(t.ID)
}

// Mutation returns the TblGarageOwnerMutation object of the builder.
func (tgouo *TblGarageOwnerUpdateOne) Mutation() *TblGarageOwnerMutation {
	return tgouo.mutation
}

// ClearUser clears the "User" edge to the TblUSers entity.
func (tgouo *TblGarageOwnerUpdateOne) ClearUser() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearUser()
	return tgouo
}

// ClearNameInitial clears the "NameInitial" edge to the TblEnum entity.
func (tgouo *TblGarageOwnerUpdateOne) ClearNameInitial() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearNameInitial()
	return tgouo
}

// ClearOwnerPhoto clears the "OwnerPhoto" edge to the TblDocument entity.
func (tgouo *TblGarageOwnerUpdateOne) ClearOwnerPhoto() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearOwnerPhoto()
	return tgouo
}

// ClearAddress clears the "Address" edge to the TblAddress entity.
func (tgouo *TblGarageOwnerUpdateOne) ClearAddress() *TblGarageOwnerUpdateOne {
	tgouo.mutation.ClearAddress()
	return tgouo
}

// Where appends a list predicates to the TblGarageOwnerUpdate builder.
func (tgouo *TblGarageOwnerUpdateOne) Where(ps ...predicate.TblGarageOwner) *TblGarageOwnerUpdateOne {
	tgouo.mutation.Where(ps...)
	return tgouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tgouo *TblGarageOwnerUpdateOne) Select(field string, fields ...string) *TblGarageOwnerUpdateOne {
	tgouo.fields = append([]string{field}, fields...)
	return tgouo
}

// Save executes the query and returns the updated TblGarageOwner entity.
func (tgouo *TblGarageOwnerUpdateOne) Save(ctx context.Context) (*TblGarageOwner, error) {
	if err := tgouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tgouo.sqlSave, tgouo.mutation, tgouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tgouo *TblGarageOwnerUpdateOne) SaveX(ctx context.Context) *TblGarageOwner {
	node, err := tgouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tgouo *TblGarageOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := tgouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tgouo *TblGarageOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := tgouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tgouo *TblGarageOwnerUpdateOne) defaults() error {
	if _, ok := tgouo.mutation.UpdatedAt(); !ok {
		if tblgarageowner.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblgarageowner.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tblgarageowner.UpdateDefaultUpdatedAt()
		tgouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tgouo *TblGarageOwnerUpdateOne) check() error {
	if v, ok := tgouo.mutation.CreatedBy(); ok {
		if err := tblgarageowner.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.UpdatedBy(); ok {
		if err := tblgarageowner.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.DeletedBy(); ok {
		if err := tblgarageowner.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.UserIdUlid(); ok {
		if err := tblgarageowner.UserIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "UserId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.UserId_ulid": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.FirstName(); ok {
		if err := tblgarageowner.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "FirstName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.FirstName": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.MiddleName(); ok {
		if err := tblgarageowner.MiddleNameValidator(v); err != nil {
			return &ValidationError{Name: "MiddleName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.MiddleName": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.LastName(); ok {
		if err := tblgarageowner.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "LastName", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.LastName": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.ContactNumber(); ok {
		if err := tblgarageowner.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "ContactNumber", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.ContactNumber": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.Email(); ok {
		if err := tblgarageowner.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.Email": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.PhotoIdUlid(); ok {
		if err := tblgarageowner.PhotoIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "PhotoId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.PhotoId_ulid": %w`, err)}
		}
	}
	if v, ok := tgouo.mutation.AddressIdUlid(); ok {
		if err := tblgarageowner.AddressIdUlidValidator(v); err != nil {
			return &ValidationError{Name: "AddressId_ulid", err: fmt.Errorf(`entgen: validator failed for field "TblGarageOwner.AddressId_ulid": %w`, err)}
		}
	}
	if _, ok := tgouo.mutation.AddressID(); tgouo.mutation.AddressCleared() && !ok {
		return errors.New(`entgen: clearing a required unique edge "TblGarageOwner.Address"`)
	}
	return nil
}

func (tgouo *TblGarageOwnerUpdateOne) sqlSave(ctx context.Context) (_node *TblGarageOwner, err error) {
	if err := tgouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblgarageowner.Table, tblgarageowner.Columns, sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString))
	id, ok := tgouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblGarageOwner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tgouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblgarageowner.FieldID)
		for _, f := range fields {
			if !tblgarageowner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblgarageowner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tgouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tgouo.mutation.CreatedBy(); ok {
		_spec.SetField(tblgarageowner.FieldCreatedBy, field.TypeString, value)
	}
	if tgouo.mutation.CreatedByCleared() {
		_spec.ClearField(tblgarageowner.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tgouo.mutation.UpdatedBy(); ok {
		_spec.SetField(tblgarageowner.FieldUpdatedBy, field.TypeString, value)
	}
	if tgouo.mutation.UpdatedByCleared() {
		_spec.ClearField(tblgarageowner.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tgouo.mutation.DeletedBy(); ok {
		_spec.SetField(tblgarageowner.FieldDeletedBy, field.TypeString, value)
	}
	if tgouo.mutation.DeletedByCleared() {
		_spec.ClearField(tblgarageowner.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tgouo.mutation.IP(); ok {
		_spec.SetField(tblgarageowner.FieldIP, field.TypeString, value)
	}
	if tgouo.mutation.IPCleared() {
		_spec.ClearField(tblgarageowner.FieldIP, field.TypeString)
	}
	if value, ok := tgouo.mutation.UserAgent(); ok {
		_spec.SetField(tblgarageowner.FieldUserAgent, field.TypeString, value)
	}
	if tgouo.mutation.UserAgentCleared() {
		_spec.ClearField(tblgarageowner.FieldUserAgent, field.TypeString)
	}
	if value, ok := tgouo.mutation.CreatedAt(); ok {
		_spec.SetField(tblgarageowner.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tgouo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblgarageowner.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tgouo.mutation.DeletedAt(); ok {
		_spec.SetField(tblgarageowner.FieldDeletedAt, field.TypeTime, value)
	}
	if tgouo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblgarageowner.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tgouo.mutation.FirstName(); ok {
		_spec.SetField(tblgarageowner.FieldFirstName, field.TypeString, value)
	}
	if value, ok := tgouo.mutation.MiddleName(); ok {
		_spec.SetField(tblgarageowner.FieldMiddleName, field.TypeString, value)
	}
	if tgouo.mutation.MiddleNameCleared() {
		_spec.ClearField(tblgarageowner.FieldMiddleName, field.TypeString)
	}
	if value, ok := tgouo.mutation.LastName(); ok {
		_spec.SetField(tblgarageowner.FieldLastName, field.TypeString, value)
	}
	if value, ok := tgouo.mutation.ContactNumber(); ok {
		_spec.SetField(tblgarageowner.FieldContactNumber, field.TypeString, value)
	}
	if value, ok := tgouo.mutation.Email(); ok {
		_spec.SetField(tblgarageowner.FieldEmail, field.TypeString, value)
	}
	if tgouo.mutation.EmailCleared() {
		_spec.ClearField(tblgarageowner.FieldEmail, field.TypeString)
	}
	if value, ok := tgouo.mutation.Age(); ok {
		_spec.SetField(tblgarageowner.FieldAge, field.TypeInt, value)
	}
	if value, ok := tgouo.mutation.AddedAge(); ok {
		_spec.AddField(tblgarageowner.FieldAge, field.TypeInt, value)
	}
	if tgouo.mutation.AgeCleared() {
		_spec.ClearField(tblgarageowner.FieldAge, field.TypeInt)
	}
	if tgouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.UserTable,
			Columns: []string{tblgarageowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblusers.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.UserTable,
			Columns: []string{tblgarageowner.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblusers.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgouo.mutation.NameInitialCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.NameInitialTable,
			Columns: []string{tblgarageowner.NameInitialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgouo.mutation.NameInitialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.NameInitialTable,
			Columns: []string{tblgarageowner.NameInitialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblenum.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgouo.mutation.OwnerPhotoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.OwnerPhotoTable,
			Columns: []string{tblgarageowner.OwnerPhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgouo.mutation.OwnerPhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.OwnerPhotoTable,
			Columns: []string{tblgarageowner.OwnerPhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tgouo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.AddressTable,
			Columns: []string{tblgarageowner.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tgouo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tblgarageowner.AddressTable,
			Columns: []string{tblgarageowner.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblGarageOwner{config: tgouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tgouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblgarageowner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tgouo.mutation.done = true
	return _node, nil
}
