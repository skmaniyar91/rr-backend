// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/predicate"
	"rr-backend/ent/entgen/tbldocument"
	"rr-backend/ent/entgen/tblgarageowner"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblDocumentUpdate is the builder for updating TblDocument entities.
type TblDocumentUpdate struct {
	config
	hooks    []Hook
	mutation *TblDocumentMutation
}

// Where appends a list predicates to the TblDocumentUpdate builder.
func (tdu *TblDocumentUpdate) Where(ps ...predicate.TblDocument) *TblDocumentUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetCreatedBy sets the "CreatedBy" field.
func (tdu *TblDocumentUpdate) SetCreatedBy(s string) *TblDocumentUpdate {
	tdu.mutation.SetCreatedBy(s)
	return tdu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableCreatedBy(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetCreatedBy(*s)
	}
	return tdu
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tdu *TblDocumentUpdate) ClearCreatedBy() *TblDocumentUpdate {
	tdu.mutation.ClearCreatedBy()
	return tdu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tdu *TblDocumentUpdate) SetUpdatedBy(s string) *TblDocumentUpdate {
	tdu.mutation.SetUpdatedBy(s)
	return tdu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableUpdatedBy(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetUpdatedBy(*s)
	}
	return tdu
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tdu *TblDocumentUpdate) ClearUpdatedBy() *TblDocumentUpdate {
	tdu.mutation.ClearUpdatedBy()
	return tdu
}

// SetDeletedBy sets the "DeletedBy" field.
func (tdu *TblDocumentUpdate) SetDeletedBy(s string) *TblDocumentUpdate {
	tdu.mutation.SetDeletedBy(s)
	return tdu
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableDeletedBy(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetDeletedBy(*s)
	}
	return tdu
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tdu *TblDocumentUpdate) ClearDeletedBy() *TblDocumentUpdate {
	tdu.mutation.ClearDeletedBy()
	return tdu
}

// SetIP sets the "IP" field.
func (tdu *TblDocumentUpdate) SetIP(s string) *TblDocumentUpdate {
	tdu.mutation.SetIP(s)
	return tdu
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableIP(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetIP(*s)
	}
	return tdu
}

// ClearIP clears the value of the "IP" field.
func (tdu *TblDocumentUpdate) ClearIP() *TblDocumentUpdate {
	tdu.mutation.ClearIP()
	return tdu
}

// SetUserAgent sets the "UserAgent" field.
func (tdu *TblDocumentUpdate) SetUserAgent(s string) *TblDocumentUpdate {
	tdu.mutation.SetUserAgent(s)
	return tdu
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableUserAgent(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetUserAgent(*s)
	}
	return tdu
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tdu *TblDocumentUpdate) ClearUserAgent() *TblDocumentUpdate {
	tdu.mutation.ClearUserAgent()
	return tdu
}

// SetCreatedAt sets the "CreatedAt" field.
func (tdu *TblDocumentUpdate) SetCreatedAt(t time.Time) *TblDocumentUpdate {
	tdu.mutation.SetCreatedAt(t)
	return tdu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableCreatedAt(t *time.Time) *TblDocumentUpdate {
	if t != nil {
		tdu.SetCreatedAt(*t)
	}
	return tdu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tdu *TblDocumentUpdate) SetUpdatedAt(t time.Time) *TblDocumentUpdate {
	tdu.mutation.SetUpdatedAt(t)
	return tdu
}

// SetDeletedAt sets the "DeletedAt" field.
func (tdu *TblDocumentUpdate) SetDeletedAt(t time.Time) *TblDocumentUpdate {
	tdu.mutation.SetDeletedAt(t)
	return tdu
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableDeletedAt(t *time.Time) *TblDocumentUpdate {
	if t != nil {
		tdu.SetDeletedAt(*t)
	}
	return tdu
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tdu *TblDocumentUpdate) ClearDeletedAt() *TblDocumentUpdate {
	tdu.mutation.ClearDeletedAt()
	return tdu
}

// SetName sets the "Name" field.
func (tdu *TblDocumentUpdate) SetName(s string) *TblDocumentUpdate {
	tdu.mutation.SetName(s)
	return tdu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableName(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetName(*s)
	}
	return tdu
}

// SetRelativePath sets the "RelativePath" field.
func (tdu *TblDocumentUpdate) SetRelativePath(s string) *TblDocumentUpdate {
	tdu.mutation.SetRelativePath(s)
	return tdu
}

// SetNillableRelativePath sets the "RelativePath" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableRelativePath(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetRelativePath(*s)
	}
	return tdu
}

// SetURL sets the "URL" field.
func (tdu *TblDocumentUpdate) SetURL(s string) *TblDocumentUpdate {
	tdu.mutation.SetURL(s)
	return tdu
}

// SetNillableURL sets the "URL" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableURL(s *string) *TblDocumentUpdate {
	if s != nil {
		tdu.SetURL(*s)
	}
	return tdu
}

// SetSizeInBytes sets the "SizeInBytes" field.
func (tdu *TblDocumentUpdate) SetSizeInBytes(f float64) *TblDocumentUpdate {
	tdu.mutation.ResetSizeInBytes()
	tdu.mutation.SetSizeInBytes(f)
	return tdu
}

// SetNillableSizeInBytes sets the "SizeInBytes" field if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillableSizeInBytes(f *float64) *TblDocumentUpdate {
	if f != nil {
		tdu.SetSizeInBytes(*f)
	}
	return tdu
}

// AddSizeInBytes adds f to the "SizeInBytes" field.
func (tdu *TblDocumentUpdate) AddSizeInBytes(f float64) *TblDocumentUpdate {
	tdu.mutation.AddSizeInBytes(f)
	return tdu
}

// SetPhotoID sets the "Photo" edge to the TblGarageOwner entity by ID.
func (tdu *TblDocumentUpdate) SetPhotoID(id string) *TblDocumentUpdate {
	tdu.mutation.SetPhotoID(id)
	return tdu
}

// SetNillablePhotoID sets the "Photo" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tdu *TblDocumentUpdate) SetNillablePhotoID(id *string) *TblDocumentUpdate {
	if id != nil {
		tdu = tdu.SetPhotoID(*id)
	}
	return tdu
}

// SetPhoto sets the "Photo" edge to the TblGarageOwner entity.
func (tdu *TblDocumentUpdate) SetPhoto(t *TblGarageOwner) *TblDocumentUpdate {
	return tdu.SetPhotoID(t.ID)
}

// Mutation returns the TblDocumentMutation object of the builder.
func (tdu *TblDocumentUpdate) Mutation() *TblDocumentMutation {
	return tdu.mutation
}

// ClearPhoto clears the "Photo" edge to the TblGarageOwner entity.
func (tdu *TblDocumentUpdate) ClearPhoto() *TblDocumentUpdate {
	tdu.mutation.ClearPhoto()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TblDocumentUpdate) Save(ctx context.Context) (int, error) {
	if err := tdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TblDocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TblDocumentUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TblDocumentUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdu *TblDocumentUpdate) defaults() error {
	if _, ok := tdu.mutation.UpdatedAt(); !ok {
		if tbldocument.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbldocument.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tbldocument.UpdateDefaultUpdatedAt()
		tdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TblDocumentUpdate) check() error {
	if v, ok := tdu.mutation.CreatedBy(); ok {
		if err := tbldocument.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.UpdatedBy(); ok {
		if err := tbldocument.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.DeletedBy(); ok {
		if err := tbldocument.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.Name(); ok {
		if err := tbldocument.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.Name": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.RelativePath(); ok {
		if err := tbldocument.RelativePathValidator(v); err != nil {
			return &ValidationError{Name: "RelativePath", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.RelativePath": %w`, err)}
		}
	}
	if v, ok := tdu.mutation.URL(); ok {
		if err := tbldocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "URL", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.URL": %w`, err)}
		}
	}
	return nil
}

func (tdu *TblDocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbldocument.Table, tbldocument.Columns, sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.CreatedBy(); ok {
		_spec.SetField(tbldocument.FieldCreatedBy, field.TypeString, value)
	}
	if tdu.mutation.CreatedByCleared() {
		_spec.ClearField(tbldocument.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tdu.mutation.UpdatedBy(); ok {
		_spec.SetField(tbldocument.FieldUpdatedBy, field.TypeString, value)
	}
	if tdu.mutation.UpdatedByCleared() {
		_spec.ClearField(tbldocument.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tdu.mutation.DeletedBy(); ok {
		_spec.SetField(tbldocument.FieldDeletedBy, field.TypeString, value)
	}
	if tdu.mutation.DeletedByCleared() {
		_spec.ClearField(tbldocument.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tdu.mutation.IP(); ok {
		_spec.SetField(tbldocument.FieldIP, field.TypeString, value)
	}
	if tdu.mutation.IPCleared() {
		_spec.ClearField(tbldocument.FieldIP, field.TypeString)
	}
	if value, ok := tdu.mutation.UserAgent(); ok {
		_spec.SetField(tbldocument.FieldUserAgent, field.TypeString, value)
	}
	if tdu.mutation.UserAgentCleared() {
		_spec.ClearField(tbldocument.FieldUserAgent, field.TypeString)
	}
	if value, ok := tdu.mutation.CreatedAt(); ok {
		_spec.SetField(tbldocument.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tdu.mutation.UpdatedAt(); ok {
		_spec.SetField(tbldocument.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tdu.mutation.DeletedAt(); ok {
		_spec.SetField(tbldocument.FieldDeletedAt, field.TypeTime, value)
	}
	if tdu.mutation.DeletedAtCleared() {
		_spec.ClearField(tbldocument.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tdu.mutation.Name(); ok {
		_spec.SetField(tbldocument.FieldName, field.TypeString, value)
	}
	if value, ok := tdu.mutation.RelativePath(); ok {
		_spec.SetField(tbldocument.FieldRelativePath, field.TypeString, value)
	}
	if value, ok := tdu.mutation.URL(); ok {
		_spec.SetField(tbldocument.FieldURL, field.TypeString, value)
	}
	if value, ok := tdu.mutation.SizeInBytes(); ok {
		_spec.SetField(tbldocument.FieldSizeInBytes, field.TypeFloat64, value)
	}
	if value, ok := tdu.mutation.AddedSizeInBytes(); ok {
		_spec.AddField(tbldocument.FieldSizeInBytes, field.TypeFloat64, value)
	}
	if tdu.mutation.PhotoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbldocument.PhotoTable,
			Columns: []string{tbldocument.PhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.PhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbldocument.PhotoTable,
			Columns: []string{tbldocument.PhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbldocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TblDocumentUpdateOne is the builder for updating a single TblDocument entity.
type TblDocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblDocumentMutation
}

// SetCreatedBy sets the "CreatedBy" field.
func (tduo *TblDocumentUpdateOne) SetCreatedBy(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetCreatedBy(s)
	return tduo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableCreatedBy(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetCreatedBy(*s)
	}
	return tduo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tduo *TblDocumentUpdateOne) ClearCreatedBy() *TblDocumentUpdateOne {
	tduo.mutation.ClearCreatedBy()
	return tduo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tduo *TblDocumentUpdateOne) SetUpdatedBy(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetUpdatedBy(s)
	return tduo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableUpdatedBy(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetUpdatedBy(*s)
	}
	return tduo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tduo *TblDocumentUpdateOne) ClearUpdatedBy() *TblDocumentUpdateOne {
	tduo.mutation.ClearUpdatedBy()
	return tduo
}

// SetDeletedBy sets the "DeletedBy" field.
func (tduo *TblDocumentUpdateOne) SetDeletedBy(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetDeletedBy(s)
	return tduo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableDeletedBy(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetDeletedBy(*s)
	}
	return tduo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tduo *TblDocumentUpdateOne) ClearDeletedBy() *TblDocumentUpdateOne {
	tduo.mutation.ClearDeletedBy()
	return tduo
}

// SetIP sets the "IP" field.
func (tduo *TblDocumentUpdateOne) SetIP(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetIP(s)
	return tduo
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableIP(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetIP(*s)
	}
	return tduo
}

// ClearIP clears the value of the "IP" field.
func (tduo *TblDocumentUpdateOne) ClearIP() *TblDocumentUpdateOne {
	tduo.mutation.ClearIP()
	return tduo
}

// SetUserAgent sets the "UserAgent" field.
func (tduo *TblDocumentUpdateOne) SetUserAgent(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetUserAgent(s)
	return tduo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableUserAgent(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetUserAgent(*s)
	}
	return tduo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tduo *TblDocumentUpdateOne) ClearUserAgent() *TblDocumentUpdateOne {
	tduo.mutation.ClearUserAgent()
	return tduo
}

// SetCreatedAt sets the "CreatedAt" field.
func (tduo *TblDocumentUpdateOne) SetCreatedAt(t time.Time) *TblDocumentUpdateOne {
	tduo.mutation.SetCreatedAt(t)
	return tduo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableCreatedAt(t *time.Time) *TblDocumentUpdateOne {
	if t != nil {
		tduo.SetCreatedAt(*t)
	}
	return tduo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tduo *TblDocumentUpdateOne) SetUpdatedAt(t time.Time) *TblDocumentUpdateOne {
	tduo.mutation.SetUpdatedAt(t)
	return tduo
}

// SetDeletedAt sets the "DeletedAt" field.
func (tduo *TblDocumentUpdateOne) SetDeletedAt(t time.Time) *TblDocumentUpdateOne {
	tduo.mutation.SetDeletedAt(t)
	return tduo
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableDeletedAt(t *time.Time) *TblDocumentUpdateOne {
	if t != nil {
		tduo.SetDeletedAt(*t)
	}
	return tduo
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tduo *TblDocumentUpdateOne) ClearDeletedAt() *TblDocumentUpdateOne {
	tduo.mutation.ClearDeletedAt()
	return tduo
}

// SetName sets the "Name" field.
func (tduo *TblDocumentUpdateOne) SetName(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetName(s)
	return tduo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableName(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetName(*s)
	}
	return tduo
}

// SetRelativePath sets the "RelativePath" field.
func (tduo *TblDocumentUpdateOne) SetRelativePath(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetRelativePath(s)
	return tduo
}

// SetNillableRelativePath sets the "RelativePath" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableRelativePath(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetRelativePath(*s)
	}
	return tduo
}

// SetURL sets the "URL" field.
func (tduo *TblDocumentUpdateOne) SetURL(s string) *TblDocumentUpdateOne {
	tduo.mutation.SetURL(s)
	return tduo
}

// SetNillableURL sets the "URL" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableURL(s *string) *TblDocumentUpdateOne {
	if s != nil {
		tduo.SetURL(*s)
	}
	return tduo
}

// SetSizeInBytes sets the "SizeInBytes" field.
func (tduo *TblDocumentUpdateOne) SetSizeInBytes(f float64) *TblDocumentUpdateOne {
	tduo.mutation.ResetSizeInBytes()
	tduo.mutation.SetSizeInBytes(f)
	return tduo
}

// SetNillableSizeInBytes sets the "SizeInBytes" field if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillableSizeInBytes(f *float64) *TblDocumentUpdateOne {
	if f != nil {
		tduo.SetSizeInBytes(*f)
	}
	return tduo
}

// AddSizeInBytes adds f to the "SizeInBytes" field.
func (tduo *TblDocumentUpdateOne) AddSizeInBytes(f float64) *TblDocumentUpdateOne {
	tduo.mutation.AddSizeInBytes(f)
	return tduo
}

// SetPhotoID sets the "Photo" edge to the TblGarageOwner entity by ID.
func (tduo *TblDocumentUpdateOne) SetPhotoID(id string) *TblDocumentUpdateOne {
	tduo.mutation.SetPhotoID(id)
	return tduo
}

// SetNillablePhotoID sets the "Photo" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tduo *TblDocumentUpdateOne) SetNillablePhotoID(id *string) *TblDocumentUpdateOne {
	if id != nil {
		tduo = tduo.SetPhotoID(*id)
	}
	return tduo
}

// SetPhoto sets the "Photo" edge to the TblGarageOwner entity.
func (tduo *TblDocumentUpdateOne) SetPhoto(t *TblGarageOwner) *TblDocumentUpdateOne {
	return tduo.SetPhotoID(t.ID)
}

// Mutation returns the TblDocumentMutation object of the builder.
func (tduo *TblDocumentUpdateOne) Mutation() *TblDocumentMutation {
	return tduo.mutation
}

// ClearPhoto clears the "Photo" edge to the TblGarageOwner entity.
func (tduo *TblDocumentUpdateOne) ClearPhoto() *TblDocumentUpdateOne {
	tduo.mutation.ClearPhoto()
	return tduo
}

// Where appends a list predicates to the TblDocumentUpdate builder.
func (tduo *TblDocumentUpdateOne) Where(ps ...predicate.TblDocument) *TblDocumentUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TblDocumentUpdateOne) Select(field string, fields ...string) *TblDocumentUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TblDocument entity.
func (tduo *TblDocumentUpdateOne) Save(ctx context.Context) (*TblDocument, error) {
	if err := tduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TblDocumentUpdateOne) SaveX(ctx context.Context) *TblDocument {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TblDocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TblDocumentUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tduo *TblDocumentUpdateOne) defaults() error {
	if _, ok := tduo.mutation.UpdatedAt(); !ok {
		if tbldocument.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbldocument.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tbldocument.UpdateDefaultUpdatedAt()
		tduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TblDocumentUpdateOne) check() error {
	if v, ok := tduo.mutation.CreatedBy(); ok {
		if err := tbldocument.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.UpdatedBy(); ok {
		if err := tbldocument.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.DeletedBy(); ok {
		if err := tbldocument.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.Name(); ok {
		if err := tbldocument.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.Name": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.RelativePath(); ok {
		if err := tbldocument.RelativePathValidator(v); err != nil {
			return &ValidationError{Name: "RelativePath", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.RelativePath": %w`, err)}
		}
	}
	if v, ok := tduo.mutation.URL(); ok {
		if err := tbldocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "URL", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.URL": %w`, err)}
		}
	}
	return nil
}

func (tduo *TblDocumentUpdateOne) sqlSave(ctx context.Context) (_node *TblDocument, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbldocument.Table, tbldocument.Columns, sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblDocument.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbldocument.FieldID)
		for _, f := range fields {
			if !tbldocument.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tbldocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.CreatedBy(); ok {
		_spec.SetField(tbldocument.FieldCreatedBy, field.TypeString, value)
	}
	if tduo.mutation.CreatedByCleared() {
		_spec.ClearField(tbldocument.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tduo.mutation.UpdatedBy(); ok {
		_spec.SetField(tbldocument.FieldUpdatedBy, field.TypeString, value)
	}
	if tduo.mutation.UpdatedByCleared() {
		_spec.ClearField(tbldocument.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tduo.mutation.DeletedBy(); ok {
		_spec.SetField(tbldocument.FieldDeletedBy, field.TypeString, value)
	}
	if tduo.mutation.DeletedByCleared() {
		_spec.ClearField(tbldocument.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tduo.mutation.IP(); ok {
		_spec.SetField(tbldocument.FieldIP, field.TypeString, value)
	}
	if tduo.mutation.IPCleared() {
		_spec.ClearField(tbldocument.FieldIP, field.TypeString)
	}
	if value, ok := tduo.mutation.UserAgent(); ok {
		_spec.SetField(tbldocument.FieldUserAgent, field.TypeString, value)
	}
	if tduo.mutation.UserAgentCleared() {
		_spec.ClearField(tbldocument.FieldUserAgent, field.TypeString)
	}
	if value, ok := tduo.mutation.CreatedAt(); ok {
		_spec.SetField(tbldocument.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tduo.mutation.UpdatedAt(); ok {
		_spec.SetField(tbldocument.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tduo.mutation.DeletedAt(); ok {
		_spec.SetField(tbldocument.FieldDeletedAt, field.TypeTime, value)
	}
	if tduo.mutation.DeletedAtCleared() {
		_spec.ClearField(tbldocument.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tduo.mutation.Name(); ok {
		_spec.SetField(tbldocument.FieldName, field.TypeString, value)
	}
	if value, ok := tduo.mutation.RelativePath(); ok {
		_spec.SetField(tbldocument.FieldRelativePath, field.TypeString, value)
	}
	if value, ok := tduo.mutation.URL(); ok {
		_spec.SetField(tbldocument.FieldURL, field.TypeString, value)
	}
	if value, ok := tduo.mutation.SizeInBytes(); ok {
		_spec.SetField(tbldocument.FieldSizeInBytes, field.TypeFloat64, value)
	}
	if value, ok := tduo.mutation.AddedSizeInBytes(); ok {
		_spec.AddField(tbldocument.FieldSizeInBytes, field.TypeFloat64, value)
	}
	if tduo.mutation.PhotoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbldocument.PhotoTable,
			Columns: []string{tbldocument.PhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.PhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbldocument.PhotoTable,
			Columns: []string{tbldocument.PhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblDocument{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbldocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
