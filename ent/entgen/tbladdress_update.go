// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/predicate"
	"rr-backend/ent/entgen/tbladdress"
	"rr-backend/ent/entgen/tblgarageowner"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAddressUpdate is the builder for updating TblAddress entities.
type TblAddressUpdate struct {
	config
	hooks    []Hook
	mutation *TblAddressMutation
}

// Where appends a list predicates to the TblAddressUpdate builder.
func (tau *TblAddressUpdate) Where(ps ...predicate.TblAddress) *TblAddressUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetCreatedBy sets the "CreatedBy" field.
func (tau *TblAddressUpdate) SetCreatedBy(s string) *TblAddressUpdate {
	tau.mutation.SetCreatedBy(s)
	return tau
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableCreatedBy(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetCreatedBy(*s)
	}
	return tau
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tau *TblAddressUpdate) ClearCreatedBy() *TblAddressUpdate {
	tau.mutation.ClearCreatedBy()
	return tau
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tau *TblAddressUpdate) SetUpdatedBy(s string) *TblAddressUpdate {
	tau.mutation.SetUpdatedBy(s)
	return tau
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableUpdatedBy(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetUpdatedBy(*s)
	}
	return tau
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tau *TblAddressUpdate) ClearUpdatedBy() *TblAddressUpdate {
	tau.mutation.ClearUpdatedBy()
	return tau
}

// SetDeletedBy sets the "DeletedBy" field.
func (tau *TblAddressUpdate) SetDeletedBy(s string) *TblAddressUpdate {
	tau.mutation.SetDeletedBy(s)
	return tau
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableDeletedBy(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetDeletedBy(*s)
	}
	return tau
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tau *TblAddressUpdate) ClearDeletedBy() *TblAddressUpdate {
	tau.mutation.ClearDeletedBy()
	return tau
}

// SetIP sets the "IP" field.
func (tau *TblAddressUpdate) SetIP(s string) *TblAddressUpdate {
	tau.mutation.SetIP(s)
	return tau
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableIP(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetIP(*s)
	}
	return tau
}

// ClearIP clears the value of the "IP" field.
func (tau *TblAddressUpdate) ClearIP() *TblAddressUpdate {
	tau.mutation.ClearIP()
	return tau
}

// SetUserAgent sets the "UserAgent" field.
func (tau *TblAddressUpdate) SetUserAgent(s string) *TblAddressUpdate {
	tau.mutation.SetUserAgent(s)
	return tau
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableUserAgent(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetUserAgent(*s)
	}
	return tau
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tau *TblAddressUpdate) ClearUserAgent() *TblAddressUpdate {
	tau.mutation.ClearUserAgent()
	return tau
}

// SetCreatedAt sets the "CreatedAt" field.
func (tau *TblAddressUpdate) SetCreatedAt(t time.Time) *TblAddressUpdate {
	tau.mutation.SetCreatedAt(t)
	return tau
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableCreatedAt(t *time.Time) *TblAddressUpdate {
	if t != nil {
		tau.SetCreatedAt(*t)
	}
	return tau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tau *TblAddressUpdate) SetUpdatedAt(t time.Time) *TblAddressUpdate {
	tau.mutation.SetUpdatedAt(t)
	return tau
}

// SetDeletedAt sets the "DeletedAt" field.
func (tau *TblAddressUpdate) SetDeletedAt(t time.Time) *TblAddressUpdate {
	tau.mutation.SetDeletedAt(t)
	return tau
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableDeletedAt(t *time.Time) *TblAddressUpdate {
	if t != nil {
		tau.SetDeletedAt(*t)
	}
	return tau
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tau *TblAddressUpdate) ClearDeletedAt() *TblAddressUpdate {
	tau.mutation.ClearDeletedAt()
	return tau
}

// SetLine1 sets the "Line1" field.
func (tau *TblAddressUpdate) SetLine1(s string) *TblAddressUpdate {
	tau.mutation.SetLine1(s)
	return tau
}

// SetNillableLine1 sets the "Line1" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableLine1(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetLine1(*s)
	}
	return tau
}

// SetLine2 sets the "Line2" field.
func (tau *TblAddressUpdate) SetLine2(s string) *TblAddressUpdate {
	tau.mutation.SetLine2(s)
	return tau
}

// SetNillableLine2 sets the "Line2" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableLine2(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetLine2(*s)
	}
	return tau
}

// ClearLine2 clears the value of the "Line2" field.
func (tau *TblAddressUpdate) ClearLine2() *TblAddressUpdate {
	tau.mutation.ClearLine2()
	return tau
}

// SetLine3 sets the "Line3" field.
func (tau *TblAddressUpdate) SetLine3(s string) *TblAddressUpdate {
	tau.mutation.SetLine3(s)
	return tau
}

// SetNillableLine3 sets the "Line3" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableLine3(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetLine3(*s)
	}
	return tau
}

// ClearLine3 clears the value of the "Line3" field.
func (tau *TblAddressUpdate) ClearLine3() *TblAddressUpdate {
	tau.mutation.ClearLine3()
	return tau
}

// SetCity sets the "City" field.
func (tau *TblAddressUpdate) SetCity(s string) *TblAddressUpdate {
	tau.mutation.SetCity(s)
	return tau
}

// SetNillableCity sets the "City" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableCity(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetCity(*s)
	}
	return tau
}

// SetDistrict sets the "District" field.
func (tau *TblAddressUpdate) SetDistrict(s string) *TblAddressUpdate {
	tau.mutation.SetDistrict(s)
	return tau
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableDistrict(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetDistrict(*s)
	}
	return tau
}

// ClearDistrict clears the value of the "District" field.
func (tau *TblAddressUpdate) ClearDistrict() *TblAddressUpdate {
	tau.mutation.ClearDistrict()
	return tau
}

// SetSubDistrict sets the "SubDistrict" field.
func (tau *TblAddressUpdate) SetSubDistrict(s string) *TblAddressUpdate {
	tau.mutation.SetSubDistrict(s)
	return tau
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableSubDistrict(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetSubDistrict(*s)
	}
	return tau
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (tau *TblAddressUpdate) ClearSubDistrict() *TblAddressUpdate {
	tau.mutation.ClearSubDistrict()
	return tau
}

// SetState sets the "State" field.
func (tau *TblAddressUpdate) SetState(s string) *TblAddressUpdate {
	tau.mutation.SetState(s)
	return tau
}

// SetNillableState sets the "State" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableState(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetState(*s)
	}
	return tau
}

// SetCountry sets the "Country" field.
func (tau *TblAddressUpdate) SetCountry(s string) *TblAddressUpdate {
	tau.mutation.SetCountry(s)
	return tau
}

// SetNillableCountry sets the "Country" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableCountry(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetCountry(*s)
	}
	return tau
}

// SetPostalCode sets the "PostalCode" field.
func (tau *TblAddressUpdate) SetPostalCode(s string) *TblAddressUpdate {
	tau.mutation.SetPostalCode(s)
	return tau
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (tau *TblAddressUpdate) SetNillablePostalCode(s *string) *TblAddressUpdate {
	if s != nil {
		tau.SetPostalCode(*s)
	}
	return tau
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (tau *TblAddressUpdate) ClearPostalCode() *TblAddressUpdate {
	tau.mutation.ClearPostalCode()
	return tau
}

// SetOwnerAddressID sets the "OwnerAddress" edge to the TblGarageOwner entity by ID.
func (tau *TblAddressUpdate) SetOwnerAddressID(id string) *TblAddressUpdate {
	tau.mutation.SetOwnerAddressID(id)
	return tau
}

// SetNillableOwnerAddressID sets the "OwnerAddress" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tau *TblAddressUpdate) SetNillableOwnerAddressID(id *string) *TblAddressUpdate {
	if id != nil {
		tau = tau.SetOwnerAddressID(*id)
	}
	return tau
}

// SetOwnerAddress sets the "OwnerAddress" edge to the TblGarageOwner entity.
func (tau *TblAddressUpdate) SetOwnerAddress(t *TblGarageOwner) *TblAddressUpdate {
	return tau.SetOwnerAddressID(t.ID)
}

// Mutation returns the TblAddressMutation object of the builder.
func (tau *TblAddressUpdate) Mutation() *TblAddressMutation {
	return tau.mutation
}

// ClearOwnerAddress clears the "OwnerAddress" edge to the TblGarageOwner entity.
func (tau *TblAddressUpdate) ClearOwnerAddress() *TblAddressUpdate {
	tau.mutation.ClearOwnerAddress()
	return tau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TblAddressUpdate) Save(ctx context.Context) (int, error) {
	if err := tau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TblAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TblAddressUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TblAddressUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tau *TblAddressUpdate) defaults() error {
	if _, ok := tau.mutation.UpdatedAt(); !ok {
		if tbladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbladdress.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tbladdress.UpdateDefaultUpdatedAt()
		tau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tau *TblAddressUpdate) check() error {
	if v, ok := tau.mutation.CreatedBy(); ok {
		if err := tbladdress.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tau.mutation.UpdatedBy(); ok {
		if err := tbladdress.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tau.mutation.DeletedBy(); ok {
		if err := tbladdress.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tau.mutation.Line1(); ok {
		if err := tbladdress.Line1Validator(v); err != nil {
			return &ValidationError{Name: "Line1", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line1": %w`, err)}
		}
	}
	if v, ok := tau.mutation.Line2(); ok {
		if err := tbladdress.Line2Validator(v); err != nil {
			return &ValidationError{Name: "Line2", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line2": %w`, err)}
		}
	}
	if v, ok := tau.mutation.Line3(); ok {
		if err := tbladdress.Line3Validator(v); err != nil {
			return &ValidationError{Name: "Line3", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line3": %w`, err)}
		}
	}
	if v, ok := tau.mutation.City(); ok {
		if err := tbladdress.CityValidator(v); err != nil {
			return &ValidationError{Name: "City", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.City": %w`, err)}
		}
	}
	if v, ok := tau.mutation.District(); ok {
		if err := tbladdress.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "District", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.District": %w`, err)}
		}
	}
	if v, ok := tau.mutation.SubDistrict(); ok {
		if err := tbladdress.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.SubDistrict": %w`, err)}
		}
	}
	if v, ok := tau.mutation.State(); ok {
		if err := tbladdress.StateValidator(v); err != nil {
			return &ValidationError{Name: "State", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.State": %w`, err)}
		}
	}
	if v, ok := tau.mutation.Country(); ok {
		if err := tbladdress.CountryValidator(v); err != nil {
			return &ValidationError{Name: "Country", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Country": %w`, err)}
		}
	}
	if v, ok := tau.mutation.PostalCode(); ok {
		if err := tbladdress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.PostalCode": %w`, err)}
		}
	}
	return nil
}

func (tau *TblAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbladdress.Table, tbladdress.Columns, sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.CreatedBy(); ok {
		_spec.SetField(tbladdress.FieldCreatedBy, field.TypeString, value)
	}
	if tau.mutation.CreatedByCleared() {
		_spec.ClearField(tbladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tau.mutation.UpdatedBy(); ok {
		_spec.SetField(tbladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if tau.mutation.UpdatedByCleared() {
		_spec.ClearField(tbladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tau.mutation.DeletedBy(); ok {
		_spec.SetField(tbladdress.FieldDeletedBy, field.TypeString, value)
	}
	if tau.mutation.DeletedByCleared() {
		_spec.ClearField(tbladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tau.mutation.IP(); ok {
		_spec.SetField(tbladdress.FieldIP, field.TypeString, value)
	}
	if tau.mutation.IPCleared() {
		_spec.ClearField(tbladdress.FieldIP, field.TypeString)
	}
	if value, ok := tau.mutation.UserAgent(); ok {
		_spec.SetField(tbladdress.FieldUserAgent, field.TypeString, value)
	}
	if tau.mutation.UserAgentCleared() {
		_spec.ClearField(tbladdress.FieldUserAgent, field.TypeString)
	}
	if value, ok := tau.mutation.CreatedAt(); ok {
		_spec.SetField(tbladdress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tau.mutation.UpdatedAt(); ok {
		_spec.SetField(tbladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tau.mutation.DeletedAt(); ok {
		_spec.SetField(tbladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if tau.mutation.DeletedAtCleared() {
		_spec.ClearField(tbladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tau.mutation.Line1(); ok {
		_spec.SetField(tbladdress.FieldLine1, field.TypeString, value)
	}
	if value, ok := tau.mutation.Line2(); ok {
		_spec.SetField(tbladdress.FieldLine2, field.TypeString, value)
	}
	if tau.mutation.Line2Cleared() {
		_spec.ClearField(tbladdress.FieldLine2, field.TypeString)
	}
	if value, ok := tau.mutation.Line3(); ok {
		_spec.SetField(tbladdress.FieldLine3, field.TypeString, value)
	}
	if tau.mutation.Line3Cleared() {
		_spec.ClearField(tbladdress.FieldLine3, field.TypeString)
	}
	if value, ok := tau.mutation.City(); ok {
		_spec.SetField(tbladdress.FieldCity, field.TypeString, value)
	}
	if value, ok := tau.mutation.District(); ok {
		_spec.SetField(tbladdress.FieldDistrict, field.TypeString, value)
	}
	if tau.mutation.DistrictCleared() {
		_spec.ClearField(tbladdress.FieldDistrict, field.TypeString)
	}
	if value, ok := tau.mutation.SubDistrict(); ok {
		_spec.SetField(tbladdress.FieldSubDistrict, field.TypeString, value)
	}
	if tau.mutation.SubDistrictCleared() {
		_spec.ClearField(tbladdress.FieldSubDistrict, field.TypeString)
	}
	if value, ok := tau.mutation.State(); ok {
		_spec.SetField(tbladdress.FieldState, field.TypeString, value)
	}
	if value, ok := tau.mutation.Country(); ok {
		_spec.SetField(tbladdress.FieldCountry, field.TypeString, value)
	}
	if value, ok := tau.mutation.PostalCode(); ok {
		_spec.SetField(tbladdress.FieldPostalCode, field.TypeString, value)
	}
	if tau.mutation.PostalCodeCleared() {
		_spec.ClearField(tbladdress.FieldPostalCode, field.TypeString)
	}
	if tau.mutation.OwnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbladdress.OwnerAddressTable,
			Columns: []string{tbladdress.OwnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.OwnerAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbladdress.OwnerAddressTable,
			Columns: []string{tbladdress.OwnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TblAddressUpdateOne is the builder for updating a single TblAddress entity.
type TblAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblAddressMutation
}

// SetCreatedBy sets the "CreatedBy" field.
func (tauo *TblAddressUpdateOne) SetCreatedBy(s string) *TblAddressUpdateOne {
	tauo.mutation.SetCreatedBy(s)
	return tauo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableCreatedBy(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetCreatedBy(*s)
	}
	return tauo
}

// ClearCreatedBy clears the value of the "CreatedBy" field.
func (tauo *TblAddressUpdateOne) ClearCreatedBy() *TblAddressUpdateOne {
	tauo.mutation.ClearCreatedBy()
	return tauo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tauo *TblAddressUpdateOne) SetUpdatedBy(s string) *TblAddressUpdateOne {
	tauo.mutation.SetUpdatedBy(s)
	return tauo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableUpdatedBy(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetUpdatedBy(*s)
	}
	return tauo
}

// ClearUpdatedBy clears the value of the "UpdatedBy" field.
func (tauo *TblAddressUpdateOne) ClearUpdatedBy() *TblAddressUpdateOne {
	tauo.mutation.ClearUpdatedBy()
	return tauo
}

// SetDeletedBy sets the "DeletedBy" field.
func (tauo *TblAddressUpdateOne) SetDeletedBy(s string) *TblAddressUpdateOne {
	tauo.mutation.SetDeletedBy(s)
	return tauo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableDeletedBy(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetDeletedBy(*s)
	}
	return tauo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tauo *TblAddressUpdateOne) ClearDeletedBy() *TblAddressUpdateOne {
	tauo.mutation.ClearDeletedBy()
	return tauo
}

// SetIP sets the "IP" field.
func (tauo *TblAddressUpdateOne) SetIP(s string) *TblAddressUpdateOne {
	tauo.mutation.SetIP(s)
	return tauo
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableIP(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetIP(*s)
	}
	return tauo
}

// ClearIP clears the value of the "IP" field.
func (tauo *TblAddressUpdateOne) ClearIP() *TblAddressUpdateOne {
	tauo.mutation.ClearIP()
	return tauo
}

// SetUserAgent sets the "UserAgent" field.
func (tauo *TblAddressUpdateOne) SetUserAgent(s string) *TblAddressUpdateOne {
	tauo.mutation.SetUserAgent(s)
	return tauo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableUserAgent(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetUserAgent(*s)
	}
	return tauo
}

// ClearUserAgent clears the value of the "UserAgent" field.
func (tauo *TblAddressUpdateOne) ClearUserAgent() *TblAddressUpdateOne {
	tauo.mutation.ClearUserAgent()
	return tauo
}

// SetCreatedAt sets the "CreatedAt" field.
func (tauo *TblAddressUpdateOne) SetCreatedAt(t time.Time) *TblAddressUpdateOne {
	tauo.mutation.SetCreatedAt(t)
	return tauo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableCreatedAt(t *time.Time) *TblAddressUpdateOne {
	if t != nil {
		tauo.SetCreatedAt(*t)
	}
	return tauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tauo *TblAddressUpdateOne) SetUpdatedAt(t time.Time) *TblAddressUpdateOne {
	tauo.mutation.SetUpdatedAt(t)
	return tauo
}

// SetDeletedAt sets the "DeletedAt" field.
func (tauo *TblAddressUpdateOne) SetDeletedAt(t time.Time) *TblAddressUpdateOne {
	tauo.mutation.SetDeletedAt(t)
	return tauo
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *TblAddressUpdateOne {
	if t != nil {
		tauo.SetDeletedAt(*t)
	}
	return tauo
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tauo *TblAddressUpdateOne) ClearDeletedAt() *TblAddressUpdateOne {
	tauo.mutation.ClearDeletedAt()
	return tauo
}

// SetLine1 sets the "Line1" field.
func (tauo *TblAddressUpdateOne) SetLine1(s string) *TblAddressUpdateOne {
	tauo.mutation.SetLine1(s)
	return tauo
}

// SetNillableLine1 sets the "Line1" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableLine1(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetLine1(*s)
	}
	return tauo
}

// SetLine2 sets the "Line2" field.
func (tauo *TblAddressUpdateOne) SetLine2(s string) *TblAddressUpdateOne {
	tauo.mutation.SetLine2(s)
	return tauo
}

// SetNillableLine2 sets the "Line2" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableLine2(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetLine2(*s)
	}
	return tauo
}

// ClearLine2 clears the value of the "Line2" field.
func (tauo *TblAddressUpdateOne) ClearLine2() *TblAddressUpdateOne {
	tauo.mutation.ClearLine2()
	return tauo
}

// SetLine3 sets the "Line3" field.
func (tauo *TblAddressUpdateOne) SetLine3(s string) *TblAddressUpdateOne {
	tauo.mutation.SetLine3(s)
	return tauo
}

// SetNillableLine3 sets the "Line3" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableLine3(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetLine3(*s)
	}
	return tauo
}

// ClearLine3 clears the value of the "Line3" field.
func (tauo *TblAddressUpdateOne) ClearLine3() *TblAddressUpdateOne {
	tauo.mutation.ClearLine3()
	return tauo
}

// SetCity sets the "City" field.
func (tauo *TblAddressUpdateOne) SetCity(s string) *TblAddressUpdateOne {
	tauo.mutation.SetCity(s)
	return tauo
}

// SetNillableCity sets the "City" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableCity(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetCity(*s)
	}
	return tauo
}

// SetDistrict sets the "District" field.
func (tauo *TblAddressUpdateOne) SetDistrict(s string) *TblAddressUpdateOne {
	tauo.mutation.SetDistrict(s)
	return tauo
}

// SetNillableDistrict sets the "District" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableDistrict(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetDistrict(*s)
	}
	return tauo
}

// ClearDistrict clears the value of the "District" field.
func (tauo *TblAddressUpdateOne) ClearDistrict() *TblAddressUpdateOne {
	tauo.mutation.ClearDistrict()
	return tauo
}

// SetSubDistrict sets the "SubDistrict" field.
func (tauo *TblAddressUpdateOne) SetSubDistrict(s string) *TblAddressUpdateOne {
	tauo.mutation.SetSubDistrict(s)
	return tauo
}

// SetNillableSubDistrict sets the "SubDistrict" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableSubDistrict(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetSubDistrict(*s)
	}
	return tauo
}

// ClearSubDistrict clears the value of the "SubDistrict" field.
func (tauo *TblAddressUpdateOne) ClearSubDistrict() *TblAddressUpdateOne {
	tauo.mutation.ClearSubDistrict()
	return tauo
}

// SetState sets the "State" field.
func (tauo *TblAddressUpdateOne) SetState(s string) *TblAddressUpdateOne {
	tauo.mutation.SetState(s)
	return tauo
}

// SetNillableState sets the "State" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableState(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetState(*s)
	}
	return tauo
}

// SetCountry sets the "Country" field.
func (tauo *TblAddressUpdateOne) SetCountry(s string) *TblAddressUpdateOne {
	tauo.mutation.SetCountry(s)
	return tauo
}

// SetNillableCountry sets the "Country" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableCountry(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetCountry(*s)
	}
	return tauo
}

// SetPostalCode sets the "PostalCode" field.
func (tauo *TblAddressUpdateOne) SetPostalCode(s string) *TblAddressUpdateOne {
	tauo.mutation.SetPostalCode(s)
	return tauo
}

// SetNillablePostalCode sets the "PostalCode" field if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillablePostalCode(s *string) *TblAddressUpdateOne {
	if s != nil {
		tauo.SetPostalCode(*s)
	}
	return tauo
}

// ClearPostalCode clears the value of the "PostalCode" field.
func (tauo *TblAddressUpdateOne) ClearPostalCode() *TblAddressUpdateOne {
	tauo.mutation.ClearPostalCode()
	return tauo
}

// SetOwnerAddressID sets the "OwnerAddress" edge to the TblGarageOwner entity by ID.
func (tauo *TblAddressUpdateOne) SetOwnerAddressID(id string) *TblAddressUpdateOne {
	tauo.mutation.SetOwnerAddressID(id)
	return tauo
}

// SetNillableOwnerAddressID sets the "OwnerAddress" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tauo *TblAddressUpdateOne) SetNillableOwnerAddressID(id *string) *TblAddressUpdateOne {
	if id != nil {
		tauo = tauo.SetOwnerAddressID(*id)
	}
	return tauo
}

// SetOwnerAddress sets the "OwnerAddress" edge to the TblGarageOwner entity.
func (tauo *TblAddressUpdateOne) SetOwnerAddress(t *TblGarageOwner) *TblAddressUpdateOne {
	return tauo.SetOwnerAddressID(t.ID)
}

// Mutation returns the TblAddressMutation object of the builder.
func (tauo *TblAddressUpdateOne) Mutation() *TblAddressMutation {
	return tauo.mutation
}

// ClearOwnerAddress clears the "OwnerAddress" edge to the TblGarageOwner entity.
func (tauo *TblAddressUpdateOne) ClearOwnerAddress() *TblAddressUpdateOne {
	tauo.mutation.ClearOwnerAddress()
	return tauo
}

// Where appends a list predicates to the TblAddressUpdate builder.
func (tauo *TblAddressUpdateOne) Where(ps ...predicate.TblAddress) *TblAddressUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TblAddressUpdateOne) Select(field string, fields ...string) *TblAddressUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TblAddress entity.
func (tauo *TblAddressUpdateOne) Save(ctx context.Context) (*TblAddress, error) {
	if err := tauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TblAddressUpdateOne) SaveX(ctx context.Context) *TblAddress {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TblAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TblAddressUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tauo *TblAddressUpdateOne) defaults() error {
	if _, ok := tauo.mutation.UpdatedAt(); !ok {
		if tbladdress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbladdress.UpdateDefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tbladdress.UpdateDefaultUpdatedAt()
		tauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TblAddressUpdateOne) check() error {
	if v, ok := tauo.mutation.CreatedBy(); ok {
		if err := tbladdress.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.UpdatedBy(); ok {
		if err := tbladdress.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.DeletedBy(); ok {
		if err := tbladdress.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.DeletedBy": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.Line1(); ok {
		if err := tbladdress.Line1Validator(v); err != nil {
			return &ValidationError{Name: "Line1", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line1": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.Line2(); ok {
		if err := tbladdress.Line2Validator(v); err != nil {
			return &ValidationError{Name: "Line2", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line2": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.Line3(); ok {
		if err := tbladdress.Line3Validator(v); err != nil {
			return &ValidationError{Name: "Line3", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Line3": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.City(); ok {
		if err := tbladdress.CityValidator(v); err != nil {
			return &ValidationError{Name: "City", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.City": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.District(); ok {
		if err := tbladdress.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "District", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.District": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.SubDistrict(); ok {
		if err := tbladdress.SubDistrictValidator(v); err != nil {
			return &ValidationError{Name: "SubDistrict", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.SubDistrict": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.State(); ok {
		if err := tbladdress.StateValidator(v); err != nil {
			return &ValidationError{Name: "State", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.State": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.Country(); ok {
		if err := tbladdress.CountryValidator(v); err != nil {
			return &ValidationError{Name: "Country", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.Country": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.PostalCode(); ok {
		if err := tbladdress.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "PostalCode", err: fmt.Errorf(`entgen: validator failed for field "TblAddress.PostalCode": %w`, err)}
		}
	}
	return nil
}

func (tauo *TblAddressUpdateOne) sqlSave(ctx context.Context) (_node *TblAddress, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbladdress.Table, tbladdress.Columns, sqlgraph.NewFieldSpec(tbladdress.FieldID, field.TypeString))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbladdress.FieldID)
		for _, f := range fields {
			if !tbladdress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tbladdress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.CreatedBy(); ok {
		_spec.SetField(tbladdress.FieldCreatedBy, field.TypeString, value)
	}
	if tauo.mutation.CreatedByCleared() {
		_spec.ClearField(tbladdress.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tauo.mutation.UpdatedBy(); ok {
		_spec.SetField(tbladdress.FieldUpdatedBy, field.TypeString, value)
	}
	if tauo.mutation.UpdatedByCleared() {
		_spec.ClearField(tbladdress.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tauo.mutation.DeletedBy(); ok {
		_spec.SetField(tbladdress.FieldDeletedBy, field.TypeString, value)
	}
	if tauo.mutation.DeletedByCleared() {
		_spec.ClearField(tbladdress.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tauo.mutation.IP(); ok {
		_spec.SetField(tbladdress.FieldIP, field.TypeString, value)
	}
	if tauo.mutation.IPCleared() {
		_spec.ClearField(tbladdress.FieldIP, field.TypeString)
	}
	if value, ok := tauo.mutation.UserAgent(); ok {
		_spec.SetField(tbladdress.FieldUserAgent, field.TypeString, value)
	}
	if tauo.mutation.UserAgentCleared() {
		_spec.ClearField(tbladdress.FieldUserAgent, field.TypeString)
	}
	if value, ok := tauo.mutation.CreatedAt(); ok {
		_spec.SetField(tbladdress.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tauo.mutation.UpdatedAt(); ok {
		_spec.SetField(tbladdress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tauo.mutation.DeletedAt(); ok {
		_spec.SetField(tbladdress.FieldDeletedAt, field.TypeTime, value)
	}
	if tauo.mutation.DeletedAtCleared() {
		_spec.ClearField(tbladdress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tauo.mutation.Line1(); ok {
		_spec.SetField(tbladdress.FieldLine1, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Line2(); ok {
		_spec.SetField(tbladdress.FieldLine2, field.TypeString, value)
	}
	if tauo.mutation.Line2Cleared() {
		_spec.ClearField(tbladdress.FieldLine2, field.TypeString)
	}
	if value, ok := tauo.mutation.Line3(); ok {
		_spec.SetField(tbladdress.FieldLine3, field.TypeString, value)
	}
	if tauo.mutation.Line3Cleared() {
		_spec.ClearField(tbladdress.FieldLine3, field.TypeString)
	}
	if value, ok := tauo.mutation.City(); ok {
		_spec.SetField(tbladdress.FieldCity, field.TypeString, value)
	}
	if value, ok := tauo.mutation.District(); ok {
		_spec.SetField(tbladdress.FieldDistrict, field.TypeString, value)
	}
	if tauo.mutation.DistrictCleared() {
		_spec.ClearField(tbladdress.FieldDistrict, field.TypeString)
	}
	if value, ok := tauo.mutation.SubDistrict(); ok {
		_spec.SetField(tbladdress.FieldSubDistrict, field.TypeString, value)
	}
	if tauo.mutation.SubDistrictCleared() {
		_spec.ClearField(tbladdress.FieldSubDistrict, field.TypeString)
	}
	if value, ok := tauo.mutation.State(); ok {
		_spec.SetField(tbladdress.FieldState, field.TypeString, value)
	}
	if value, ok := tauo.mutation.Country(); ok {
		_spec.SetField(tbladdress.FieldCountry, field.TypeString, value)
	}
	if value, ok := tauo.mutation.PostalCode(); ok {
		_spec.SetField(tbladdress.FieldPostalCode, field.TypeString, value)
	}
	if tauo.mutation.PostalCodeCleared() {
		_spec.ClearField(tbladdress.FieldPostalCode, field.TypeString)
	}
	if tauo.mutation.OwnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbladdress.OwnerAddressTable,
			Columns: []string{tbladdress.OwnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.OwnerAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbladdress.OwnerAddressTable,
			Columns: []string{tbladdress.OwnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblAddress{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbladdress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
