// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/tbldocument"
	"rr-backend/ent/entgen/tblgarageowner"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblDocumentCreate is the builder for creating a TblDocument entity.
type TblDocumentCreate struct {
	config
	mutation *TblDocumentMutation
	hooks    []Hook
}

// SetCreatedBy sets the "CreatedBy" field.
func (tdc *TblDocumentCreate) SetCreatedBy(s string) *TblDocumentCreate {
	tdc.mutation.SetCreatedBy(s)
	return tdc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableCreatedBy(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetCreatedBy(*s)
	}
	return tdc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tdc *TblDocumentCreate) SetUpdatedBy(s string) *TblDocumentCreate {
	tdc.mutation.SetUpdatedBy(s)
	return tdc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableUpdatedBy(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetUpdatedBy(*s)
	}
	return tdc
}

// SetDeletedBy sets the "DeletedBy" field.
func (tdc *TblDocumentCreate) SetDeletedBy(s string) *TblDocumentCreate {
	tdc.mutation.SetDeletedBy(s)
	return tdc
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableDeletedBy(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetDeletedBy(*s)
	}
	return tdc
}

// SetIP sets the "IP" field.
func (tdc *TblDocumentCreate) SetIP(s string) *TblDocumentCreate {
	tdc.mutation.SetIP(s)
	return tdc
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableIP(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetIP(*s)
	}
	return tdc
}

// SetUserAgent sets the "UserAgent" field.
func (tdc *TblDocumentCreate) SetUserAgent(s string) *TblDocumentCreate {
	tdc.mutation.SetUserAgent(s)
	return tdc
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableUserAgent(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetUserAgent(*s)
	}
	return tdc
}

// SetCreatedAt sets the "CreatedAt" field.
func (tdc *TblDocumentCreate) SetCreatedAt(t time.Time) *TblDocumentCreate {
	tdc.mutation.SetCreatedAt(t)
	return tdc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableCreatedAt(t *time.Time) *TblDocumentCreate {
	if t != nil {
		tdc.SetCreatedAt(*t)
	}
	return tdc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tdc *TblDocumentCreate) SetUpdatedAt(t time.Time) *TblDocumentCreate {
	tdc.mutation.SetUpdatedAt(t)
	return tdc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableUpdatedAt(t *time.Time) *TblDocumentCreate {
	if t != nil {
		tdc.SetUpdatedAt(*t)
	}
	return tdc
}

// SetDeletedAt sets the "DeletedAt" field.
func (tdc *TblDocumentCreate) SetDeletedAt(t time.Time) *TblDocumentCreate {
	tdc.mutation.SetDeletedAt(t)
	return tdc
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableDeletedAt(t *time.Time) *TblDocumentCreate {
	if t != nil {
		tdc.SetDeletedAt(*t)
	}
	return tdc
}

// SetName sets the "Name" field.
func (tdc *TblDocumentCreate) SetName(s string) *TblDocumentCreate {
	tdc.mutation.SetName(s)
	return tdc
}

// SetRelativePath sets the "RelativePath" field.
func (tdc *TblDocumentCreate) SetRelativePath(s string) *TblDocumentCreate {
	tdc.mutation.SetRelativePath(s)
	return tdc
}

// SetURL sets the "URL" field.
func (tdc *TblDocumentCreate) SetURL(s string) *TblDocumentCreate {
	tdc.mutation.SetURL(s)
	return tdc
}

// SetSizeInBytes sets the "SizeInBytes" field.
func (tdc *TblDocumentCreate) SetSizeInBytes(f float64) *TblDocumentCreate {
	tdc.mutation.SetSizeInBytes(f)
	return tdc
}

// SetID sets the "id" field.
func (tdc *TblDocumentCreate) SetID(s string) *TblDocumentCreate {
	tdc.mutation.SetID(s)
	return tdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillableID(s *string) *TblDocumentCreate {
	if s != nil {
		tdc.SetID(*s)
	}
	return tdc
}

// SetPhotoID sets the "Photo" edge to the TblGarageOwner entity by ID.
func (tdc *TblDocumentCreate) SetPhotoID(id string) *TblDocumentCreate {
	tdc.mutation.SetPhotoID(id)
	return tdc
}

// SetNillablePhotoID sets the "Photo" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tdc *TblDocumentCreate) SetNillablePhotoID(id *string) *TblDocumentCreate {
	if id != nil {
		tdc = tdc.SetPhotoID(*id)
	}
	return tdc
}

// SetPhoto sets the "Photo" edge to the TblGarageOwner entity.
func (tdc *TblDocumentCreate) SetPhoto(t *TblGarageOwner) *TblDocumentCreate {
	return tdc.SetPhotoID(t.ID)
}

// Mutation returns the TblDocumentMutation object of the builder.
func (tdc *TblDocumentCreate) Mutation() *TblDocumentMutation {
	return tdc.mutation
}

// Save creates the TblDocument in the database.
func (tdc *TblDocumentCreate) Save(ctx context.Context) (*TblDocument, error) {
	if err := tdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TblDocumentCreate) SaveX(ctx context.Context) *TblDocument {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TblDocumentCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TblDocumentCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TblDocumentCreate) defaults() error {
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		if tbldocument.DefaultCreatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbldocument.DefaultCreatedAt (forgotten import entgen/runtime?)")
		}
		v := tbldocument.DefaultCreatedAt()
		tdc.mutation.SetCreatedAt(v)
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		if tbldocument.DefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tbldocument.DefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tbldocument.DefaultUpdatedAt()
		tdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tdc.mutation.ID(); !ok {
		if tbldocument.DefaultID == nil {
			return fmt.Errorf("entgen: uninitialized tbldocument.DefaultID (forgotten import entgen/runtime?)")
		}
		v := tbldocument.DefaultID()
		tdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TblDocumentCreate) check() error {
	if v, ok := tdc.mutation.CreatedBy(); ok {
		if err := tbldocument.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tdc.mutation.UpdatedBy(); ok {
		if err := tbldocument.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tdc.mutation.DeletedBy(); ok {
		if err := tbldocument.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.DeletedBy": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`entgen: missing required field "TblDocument.CreatedAt"`)}
	}
	if _, ok := tdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`entgen: missing required field "TblDocument.UpdatedAt"`)}
	}
	if _, ok := tdc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`entgen: missing required field "TblDocument.Name"`)}
	}
	if v, ok := tdc.mutation.Name(); ok {
		if err := tbldocument.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.Name": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.RelativePath(); !ok {
		return &ValidationError{Name: "RelativePath", err: errors.New(`entgen: missing required field "TblDocument.RelativePath"`)}
	}
	if v, ok := tdc.mutation.RelativePath(); ok {
		if err := tbldocument.RelativePathValidator(v); err != nil {
			return &ValidationError{Name: "RelativePath", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.RelativePath": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.URL(); !ok {
		return &ValidationError{Name: "URL", err: errors.New(`entgen: missing required field "TblDocument.URL"`)}
	}
	if v, ok := tdc.mutation.URL(); ok {
		if err := tbldocument.URLValidator(v); err != nil {
			return &ValidationError{Name: "URL", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.URL": %w`, err)}
		}
	}
	if _, ok := tdc.mutation.SizeInBytes(); !ok {
		return &ValidationError{Name: "SizeInBytes", err: errors.New(`entgen: missing required field "TblDocument.SizeInBytes"`)}
	}
	if v, ok := tdc.mutation.ID(); ok {
		if err := tbldocument.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "TblDocument.id": %w`, err)}
		}
	}
	return nil
}

func (tdc *TblDocumentCreate) sqlSave(ctx context.Context) (*TblDocument, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblDocument.ID type: %T", _spec.ID.Value)
		}
	}
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TblDocumentCreate) createSpec() (*TblDocument, *sqlgraph.CreateSpec) {
	var (
		_node = &TblDocument{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(tbldocument.Table, sqlgraph.NewFieldSpec(tbldocument.FieldID, field.TypeString))
	)
	if id, ok := tdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tdc.mutation.CreatedBy(); ok {
		_spec.SetField(tbldocument.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = &value
	}
	if value, ok := tdc.mutation.UpdatedBy(); ok {
		_spec.SetField(tbldocument.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := tdc.mutation.DeletedBy(); ok {
		_spec.SetField(tbldocument.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := tdc.mutation.IP(); ok {
		_spec.SetField(tbldocument.FieldIP, field.TypeString, value)
		_node.IP = &value
	}
	if value, ok := tdc.mutation.UserAgent(); ok {
		_spec.SetField(tbldocument.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := tdc.mutation.CreatedAt(); ok {
		_spec.SetField(tbldocument.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tdc.mutation.UpdatedAt(); ok {
		_spec.SetField(tbldocument.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tdc.mutation.DeletedAt(); ok {
		_spec.SetField(tbldocument.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tdc.mutation.Name(); ok {
		_spec.SetField(tbldocument.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tdc.mutation.RelativePath(); ok {
		_spec.SetField(tbldocument.FieldRelativePath, field.TypeString, value)
		_node.RelativePath = value
	}
	if value, ok := tdc.mutation.URL(); ok {
		_spec.SetField(tbldocument.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := tdc.mutation.SizeInBytes(); ok {
		_spec.SetField(tbldocument.FieldSizeInBytes, field.TypeFloat64, value)
		_node.SizeInBytes = value
	}
	if nodes := tdc.mutation.PhotoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tbldocument.PhotoTable,
			Columns: []string{tbldocument.PhotoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TblDocumentCreateBulk is the builder for creating many TblDocument entities in bulk.
type TblDocumentCreateBulk struct {
	config
	err      error
	builders []*TblDocumentCreate
}

// Save creates the TblDocument entities in the database.
func (tdcb *TblDocumentCreateBulk) Save(ctx context.Context) ([]*TblDocument, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TblDocument, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblDocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TblDocumentCreateBulk) SaveX(ctx context.Context) []*TblDocument {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TblDocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TblDocumentCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
