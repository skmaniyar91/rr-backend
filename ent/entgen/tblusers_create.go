// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"rr-backend/ent/entgen/tblgarageowner"
	"rr-backend/ent/entgen/tblusers"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblUSersCreate is the builder for creating a TblUSers entity.
type TblUSersCreate struct {
	config
	mutation *TblUSersMutation
	hooks    []Hook
}

// SetCreatedBy sets the "CreatedBy" field.
func (tuc *TblUSersCreate) SetCreatedBy(s string) *TblUSersCreate {
	tuc.mutation.SetCreatedBy(s)
	return tuc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableCreatedBy(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetCreatedBy(*s)
	}
	return tuc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tuc *TblUSersCreate) SetUpdatedBy(s string) *TblUSersCreate {
	tuc.mutation.SetUpdatedBy(s)
	return tuc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableUpdatedBy(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetUpdatedBy(*s)
	}
	return tuc
}

// SetDeletedBy sets the "DeletedBy" field.
func (tuc *TblUSersCreate) SetDeletedBy(s string) *TblUSersCreate {
	tuc.mutation.SetDeletedBy(s)
	return tuc
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableDeletedBy(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetDeletedBy(*s)
	}
	return tuc
}

// SetIP sets the "IP" field.
func (tuc *TblUSersCreate) SetIP(s string) *TblUSersCreate {
	tuc.mutation.SetIP(s)
	return tuc
}

// SetNillableIP sets the "IP" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableIP(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetIP(*s)
	}
	return tuc
}

// SetUserAgent sets the "UserAgent" field.
func (tuc *TblUSersCreate) SetUserAgent(s string) *TblUSersCreate {
	tuc.mutation.SetUserAgent(s)
	return tuc
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableUserAgent(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetUserAgent(*s)
	}
	return tuc
}

// SetCreatedAt sets the "CreatedAt" field.
func (tuc *TblUSersCreate) SetCreatedAt(t time.Time) *TblUSersCreate {
	tuc.mutation.SetCreatedAt(t)
	return tuc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableCreatedAt(t *time.Time) *TblUSersCreate {
	if t != nil {
		tuc.SetCreatedAt(*t)
	}
	return tuc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tuc *TblUSersCreate) SetUpdatedAt(t time.Time) *TblUSersCreate {
	tuc.mutation.SetUpdatedAt(t)
	return tuc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableUpdatedAt(t *time.Time) *TblUSersCreate {
	if t != nil {
		tuc.SetUpdatedAt(*t)
	}
	return tuc
}

// SetDeletedAt sets the "DeletedAt" field.
func (tuc *TblUSersCreate) SetDeletedAt(t time.Time) *TblUSersCreate {
	tuc.mutation.SetDeletedAt(t)
	return tuc
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableDeletedAt(t *time.Time) *TblUSersCreate {
	if t != nil {
		tuc.SetDeletedAt(*t)
	}
	return tuc
}

// SetUserName sets the "UserName" field.
func (tuc *TblUSersCreate) SetUserName(s string) *TblUSersCreate {
	tuc.mutation.SetUserName(s)
	return tuc
}

// SetPassword sets the "Password" field.
func (tuc *TblUSersCreate) SetPassword(s string) *TblUSersCreate {
	tuc.mutation.SetPassword(s)
	return tuc
}

// SetEmail sets the "Email" field.
func (tuc *TblUSersCreate) SetEmail(s string) *TblUSersCreate {
	tuc.mutation.SetEmail(s)
	return tuc
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableEmail(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetEmail(*s)
	}
	return tuc
}

// SetID sets the "id" field.
func (tuc *TblUSersCreate) SetID(s string) *TblUSersCreate {
	tuc.mutation.SetID(s)
	return tuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableID(s *string) *TblUSersCreate {
	if s != nil {
		tuc.SetID(*s)
	}
	return tuc
}

// SetOwnerID sets the "Owner" edge to the TblGarageOwner entity by ID.
func (tuc *TblUSersCreate) SetOwnerID(id string) *TblUSersCreate {
	tuc.mutation.SetOwnerID(id)
	return tuc
}

// SetNillableOwnerID sets the "Owner" edge to the TblGarageOwner entity by ID if the given value is not nil.
func (tuc *TblUSersCreate) SetNillableOwnerID(id *string) *TblUSersCreate {
	if id != nil {
		tuc = tuc.SetOwnerID(*id)
	}
	return tuc
}

// SetOwner sets the "Owner" edge to the TblGarageOwner entity.
func (tuc *TblUSersCreate) SetOwner(t *TblGarageOwner) *TblUSersCreate {
	return tuc.SetOwnerID(t.ID)
}

// Mutation returns the TblUSersMutation object of the builder.
func (tuc *TblUSersCreate) Mutation() *TblUSersMutation {
	return tuc.mutation
}

// Save creates the TblUSers in the database.
func (tuc *TblUSersCreate) Save(ctx context.Context) (*TblUSers, error) {
	if err := tuc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TblUSersCreate) SaveX(ctx context.Context) *TblUSers {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TblUSersCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TblUSersCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuc *TblUSersCreate) defaults() error {
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		if tblusers.DefaultCreatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblusers.DefaultCreatedAt (forgotten import entgen/runtime?)")
		}
		v := tblusers.DefaultCreatedAt()
		tuc.mutation.SetCreatedAt(v)
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		if tblusers.DefaultUpdatedAt == nil {
			return fmt.Errorf("entgen: uninitialized tblusers.DefaultUpdatedAt (forgotten import entgen/runtime?)")
		}
		v := tblusers.DefaultUpdatedAt()
		tuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuc.mutation.ID(); !ok {
		if tblusers.DefaultID == nil {
			return fmt.Errorf("entgen: uninitialized tblusers.DefaultID (forgotten import entgen/runtime?)")
		}
		v := tblusers.DefaultID()
		tuc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TblUSersCreate) check() error {
	if v, ok := tuc.mutation.CreatedBy(); ok {
		if err := tblusers.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "CreatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.CreatedBy": %w`, err)}
		}
	}
	if v, ok := tuc.mutation.UpdatedBy(); ok {
		if err := tblusers.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "UpdatedBy", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.UpdatedBy": %w`, err)}
		}
	}
	if v, ok := tuc.mutation.DeletedBy(); ok {
		if err := tblusers.DeletedByValidator(v); err != nil {
			return &ValidationError{Name: "DeletedBy", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.DeletedBy": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`entgen: missing required field "TblUSers.CreatedAt"`)}
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`entgen: missing required field "TblUSers.UpdatedAt"`)}
	}
	if _, ok := tuc.mutation.UserName(); !ok {
		return &ValidationError{Name: "UserName", err: errors.New(`entgen: missing required field "TblUSers.UserName"`)}
	}
	if v, ok := tuc.mutation.UserName(); ok {
		if err := tblusers.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "UserName", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.UserName": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.Password(); !ok {
		return &ValidationError{Name: "Password", err: errors.New(`entgen: missing required field "TblUSers.Password"`)}
	}
	if v, ok := tuc.mutation.Password(); ok {
		if err := tblusers.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "Password", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.Password": %w`, err)}
		}
	}
	if v, ok := tuc.mutation.Email(); ok {
		if err := tblusers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "Email", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.Email": %w`, err)}
		}
	}
	if v, ok := tuc.mutation.ID(); ok {
		if err := tblusers.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "TblUSers.id": %w`, err)}
		}
	}
	return nil
}

func (tuc *TblUSersCreate) sqlSave(ctx context.Context) (*TblUSers, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblUSers.ID type: %T", _spec.ID.Value)
		}
	}
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TblUSersCreate) createSpec() (*TblUSers, *sqlgraph.CreateSpec) {
	var (
		_node = &TblUSers{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(tblusers.Table, sqlgraph.NewFieldSpec(tblusers.FieldID, field.TypeString))
	)
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.CreatedBy(); ok {
		_spec.SetField(tblusers.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = &value
	}
	if value, ok := tuc.mutation.UpdatedBy(); ok {
		_spec.SetField(tblusers.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := tuc.mutation.DeletedBy(); ok {
		_spec.SetField(tblusers.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if value, ok := tuc.mutation.IP(); ok {
		_spec.SetField(tblusers.FieldIP, field.TypeString, value)
		_node.IP = &value
	}
	if value, ok := tuc.mutation.UserAgent(); ok {
		_spec.SetField(tblusers.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := tuc.mutation.CreatedAt(); ok {
		_spec.SetField(tblusers.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tuc.mutation.UpdatedAt(); ok {
		_spec.SetField(tblusers.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tuc.mutation.DeletedAt(); ok {
		_spec.SetField(tblusers.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tuc.mutation.UserName(); ok {
		_spec.SetField(tblusers.FieldUserName, field.TypeString, value)
		_node.UserName = value
	}
	if value, ok := tuc.mutation.Password(); ok {
		_spec.SetField(tblusers.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := tuc.mutation.Email(); ok {
		_spec.SetField(tblusers.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if nodes := tuc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tblusers.OwnerTable,
			Columns: []string{tblusers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblgarageowner.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TblUSersCreateBulk is the builder for creating many TblUSers entities in bulk.
type TblUSersCreateBulk struct {
	config
	err      error
	builders []*TblUSersCreate
}

// Save creates the TblUSers entities in the database.
func (tucb *TblUSersCreateBulk) Save(ctx context.Context) ([]*TblUSers, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TblUSers, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblUSersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TblUSersCreateBulk) SaveX(ctx context.Context) []*TblUSers {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TblUSersCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TblUSersCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}
