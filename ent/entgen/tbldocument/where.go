// Code generated by ent, DO NOT EDIT.

package tbldocument

import (
	"rr-backend/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldID, id))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "DeletedBy" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldDeletedBy, v))
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldIP, v))
}

// UserAgent applies equality check predicate on the "UserAgent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "DeletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldName, v))
}

// RelativePath applies equality check predicate on the "RelativePath" field. It's identical to RelativePathEQ.
func RelativePath(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldRelativePath, v))
}

// URL applies equality check predicate on the "URL" field. It's identical to URLEQ.
func URL(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldURL, v))
}

// SizeInBytes applies equality check predicate on the "SizeInBytes" field. It's identical to SizeInBytesEQ.
func SizeInBytes(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldSizeInBytes, v))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "CreatedBy" field.
func CreatedByIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "CreatedBy" field.
func CreatedByNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "DeletedBy" field.
func DeletedByEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "DeletedBy" field.
func DeletedByNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "DeletedBy" field.
func DeletedByIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "DeletedBy" field.
func DeletedByNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "DeletedBy" field.
func DeletedByGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "DeletedBy" field.
func DeletedByGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "DeletedBy" field.
func DeletedByLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "DeletedBy" field.
func DeletedByLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "DeletedBy" field.
func DeletedByContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "DeletedBy" field.
func DeletedByHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "DeletedBy" field.
func DeletedByHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "DeletedBy" field.
func DeletedByIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "DeletedBy" field.
func DeletedByNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "DeletedBy" field.
func DeletedByEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "DeletedBy" field.
func DeletedByContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldDeletedBy, v))
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldIP, v))
}

// IPIsNil applies the IsNil predicate on the "IP" field.
func IPIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldIP))
}

// IPNotNil applies the NotNil predicate on the "IP" field.
func IPNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldIP))
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldIP, v))
}

// UserAgentEQ applies the EQ predicate on the "UserAgent" field.
func UserAgentEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "UserAgent" field.
func UserAgentNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "UserAgent" field.
func UserAgentIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "UserAgent" field.
func UserAgentNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "UserAgent" field.
func UserAgentGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "UserAgent" field.
func UserAgentGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "UserAgent" field.
func UserAgentLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "UserAgent" field.
func UserAgentLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "UserAgent" field.
func UserAgentContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "UserAgent" field.
func UserAgentHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "UserAgent" field.
func UserAgentHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "UserAgent" field.
func UserAgentIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "UserAgent" field.
func UserAgentNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "UserAgent" field.
func UserAgentEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "UserAgent" field.
func UserAgentContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "DeletedAt" field.
func DeletedAtEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "DeletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "DeletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "DeletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "DeletedAt" field.
func DeletedAtGT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "DeletedAt" field.
func DeletedAtGTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "DeletedAt" field.
func DeletedAtLT(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "DeletedAt" field.
func DeletedAtLTE(v time.Time) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "DeletedAt" field.
func DeletedAtIsNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "DeletedAt" field.
func DeletedAtNotNil() predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldName, v))
}

// RelativePathEQ applies the EQ predicate on the "RelativePath" field.
func RelativePathEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldRelativePath, v))
}

// RelativePathNEQ applies the NEQ predicate on the "RelativePath" field.
func RelativePathNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldRelativePath, v))
}

// RelativePathIn applies the In predicate on the "RelativePath" field.
func RelativePathIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldRelativePath, vs...))
}

// RelativePathNotIn applies the NotIn predicate on the "RelativePath" field.
func RelativePathNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldRelativePath, vs...))
}

// RelativePathGT applies the GT predicate on the "RelativePath" field.
func RelativePathGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldRelativePath, v))
}

// RelativePathGTE applies the GTE predicate on the "RelativePath" field.
func RelativePathGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldRelativePath, v))
}

// RelativePathLT applies the LT predicate on the "RelativePath" field.
func RelativePathLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldRelativePath, v))
}

// RelativePathLTE applies the LTE predicate on the "RelativePath" field.
func RelativePathLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldRelativePath, v))
}

// RelativePathContains applies the Contains predicate on the "RelativePath" field.
func RelativePathContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldRelativePath, v))
}

// RelativePathHasPrefix applies the HasPrefix predicate on the "RelativePath" field.
func RelativePathHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldRelativePath, v))
}

// RelativePathHasSuffix applies the HasSuffix predicate on the "RelativePath" field.
func RelativePathHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldRelativePath, v))
}

// RelativePathEqualFold applies the EqualFold predicate on the "RelativePath" field.
func RelativePathEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldRelativePath, v))
}

// RelativePathContainsFold applies the ContainsFold predicate on the "RelativePath" field.
func RelativePathContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldRelativePath, v))
}

// URLEQ applies the EQ predicate on the "URL" field.
func URLEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "URL" field.
func URLNEQ(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "URL" field.
func URLIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "URL" field.
func URLNotIn(vs ...string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "URL" field.
func URLGT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "URL" field.
func URLGTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "URL" field.
func URLLT(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "URL" field.
func URLLTE(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "URL" field.
func URLContains(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "URL" field.
func URLHasPrefix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "URL" field.
func URLHasSuffix(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "URL" field.
func URLEqualFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "URL" field.
func URLContainsFold(v string) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldContainsFold(FieldURL, v))
}

// SizeInBytesEQ applies the EQ predicate on the "SizeInBytes" field.
func SizeInBytesEQ(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldEQ(FieldSizeInBytes, v))
}

// SizeInBytesNEQ applies the NEQ predicate on the "SizeInBytes" field.
func SizeInBytesNEQ(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNEQ(FieldSizeInBytes, v))
}

// SizeInBytesIn applies the In predicate on the "SizeInBytes" field.
func SizeInBytesIn(vs ...float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldIn(FieldSizeInBytes, vs...))
}

// SizeInBytesNotIn applies the NotIn predicate on the "SizeInBytes" field.
func SizeInBytesNotIn(vs ...float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldNotIn(FieldSizeInBytes, vs...))
}

// SizeInBytesGT applies the GT predicate on the "SizeInBytes" field.
func SizeInBytesGT(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGT(FieldSizeInBytes, v))
}

// SizeInBytesGTE applies the GTE predicate on the "SizeInBytes" field.
func SizeInBytesGTE(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldGTE(FieldSizeInBytes, v))
}

// SizeInBytesLT applies the LT predicate on the "SizeInBytes" field.
func SizeInBytesLT(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLT(FieldSizeInBytes, v))
}

// SizeInBytesLTE applies the LTE predicate on the "SizeInBytes" field.
func SizeInBytesLTE(v float64) predicate.TblDocument {
	return predicate.TblDocument(sql.FieldLTE(FieldSizeInBytes, v))
}

// HasPhoto applies the HasEdge predicate on the "Photo" edge.
func HasPhoto() predicate.TblDocument {
	return predicate.TblDocument(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PhotoTable, PhotoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPhotoWith applies the HasEdge predicate on the "Photo" edge with a given conditions (other predicates).
func HasPhotoWith(preds ...predicate.TblGarageOwner) predicate.TblDocument {
	return predicate.TblDocument(func(s *sql.Selector) {
		step := newPhotoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TblDocument) predicate.TblDocument {
	return predicate.TblDocument(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TblDocument) predicate.TblDocument {
	return predicate.TblDocument(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TblDocument) predicate.TblDocument {
	return predicate.TblDocument(sql.NotPredicates(p))
}
