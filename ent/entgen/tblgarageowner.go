// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"rr-backend/ent/entgen/tbladdress"
	"rr-backend/ent/entgen/tbldocument"
	"rr-backend/ent/entgen/tblenum"
	"rr-backend/ent/entgen/tblgarageowner"
	"rr-backend/ent/entgen/tblusers"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblGarageOwner is the model entity for the TblGarageOwner schema.
type TblGarageOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy *string `json:"CreatedBy,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy *string `json:"UpdatedBy,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy *string `json:"DeletedBy,omitempty"`
	// IP holds the value of the "IP" field.
	IP *string `json:"IP,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent *string `json:"UserAgent,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// DeletedAt holds the value of the "DeletedAt" field.
	DeletedAt *time.Time `json:"DeletedAt,omitempty"`
	// UserIdUlid holds the value of the "UserId_ulid" field.
	UserIdUlid *string `json:"UserId_ulid,omitempty"`
	// Initial holds the value of the "Initial" field.
	Initial *int `json:"Initial,omitempty"`
	// FirstName holds the value of the "FirstName" field.
	FirstName string `json:"FirstName,omitempty"`
	// MiddleName holds the value of the "MiddleName" field.
	MiddleName *string `json:"MiddleName,omitempty"`
	// LastName holds the value of the "LastName" field.
	LastName string `json:"LastName,omitempty"`
	// ContactNumber holds the value of the "ContactNumber" field.
	ContactNumber string `json:"ContactNumber,omitempty"`
	// Email holds the value of the "Email" field.
	Email *string `json:"Email,omitempty"`
	// Age holds the value of the "Age" field.
	Age *int `json:"Age,omitempty"`
	// PhotoIdUlid holds the value of the "PhotoId_ulid" field.
	PhotoIdUlid *string `json:"PhotoId_ulid,omitempty"`
	// AddressIdUlid holds the value of the "AddressId_ulid" field.
	AddressIdUlid string `json:"AddressId_ulid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblGarageOwnerQuery when eager-loading is set.
	Edges        TblGarageOwnerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblGarageOwnerEdges holds the relations/edges for other nodes in the graph.
type TblGarageOwnerEdges struct {
	// User holds the value of the User edge.
	User *TblUSers `json:"User,omitempty"`
	// NameInitial holds the value of the NameInitial edge.
	NameInitial *TblEnum `json:"NameInitial,omitempty"`
	// OwnerPhoto holds the value of the OwnerPhoto edge.
	OwnerPhoto *TblDocument `json:"OwnerPhoto,omitempty"`
	// Address holds the value of the Address edge.
	Address *TblAddress `json:"Address,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblGarageOwnerEdges) UserOrErr() (*TblUSers, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tblusers.Label}
	}
	return nil, &NotLoadedError{edge: "User"}
}

// NameInitialOrErr returns the NameInitial value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblGarageOwnerEdges) NameInitialOrErr() (*TblEnum, error) {
	if e.NameInitial != nil {
		return e.NameInitial, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tblenum.Label}
	}
	return nil, &NotLoadedError{edge: "NameInitial"}
}

// OwnerPhotoOrErr returns the OwnerPhoto value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblGarageOwnerEdges) OwnerPhotoOrErr() (*TblDocument, error) {
	if e.OwnerPhoto != nil {
		return e.OwnerPhoto, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: tbldocument.Label}
	}
	return nil, &NotLoadedError{edge: "OwnerPhoto"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblGarageOwnerEdges) AddressOrErr() (*TblAddress, error) {
	if e.Address != nil {
		return e.Address, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: tbladdress.Label}
	}
	return nil, &NotLoadedError{edge: "Address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblGarageOwner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblgarageowner.FieldInitial, tblgarageowner.FieldAge:
			values[i] = new(sql.NullInt64)
		case tblgarageowner.FieldID, tblgarageowner.FieldCreatedBy, tblgarageowner.FieldUpdatedBy, tblgarageowner.FieldDeletedBy, tblgarageowner.FieldIP, tblgarageowner.FieldUserAgent, tblgarageowner.FieldUserIdUlid, tblgarageowner.FieldFirstName, tblgarageowner.FieldMiddleName, tblgarageowner.FieldLastName, tblgarageowner.FieldContactNumber, tblgarageowner.FieldEmail, tblgarageowner.FieldPhotoIdUlid, tblgarageowner.FieldAddressIdUlid:
			values[i] = new(sql.NullString)
		case tblgarageowner.FieldCreatedAt, tblgarageowner.FieldUpdatedAt, tblgarageowner.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblGarageOwner fields.
func (tgo *TblGarageOwner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblgarageowner.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tgo.ID = value.String
			}
		case tblgarageowner.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				tgo.CreatedBy = new(string)
				*tgo.CreatedBy = value.String
			}
		case tblgarageowner.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				tgo.UpdatedBy = new(string)
				*tgo.UpdatedBy = value.String
			}
		case tblgarageowner.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				tgo.DeletedBy = new(string)
				*tgo.DeletedBy = value.String
			}
		case tblgarageowner.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IP", values[i])
			} else if value.Valid {
				tgo.IP = new(string)
				*tgo.IP = value.String
			}
		case tblgarageowner.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				tgo.UserAgent = new(string)
				*tgo.UserAgent = value.String
			}
		case tblgarageowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				tgo.CreatedAt = value.Time
			}
		case tblgarageowner.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				tgo.UpdatedAt = value.Time
			}
		case tblgarageowner.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedAt", values[i])
			} else if value.Valid {
				tgo.DeletedAt = new(time.Time)
				*tgo.DeletedAt = value.Time
			}
		case tblgarageowner.FieldUserIdUlid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserId_ulid", values[i])
			} else if value.Valid {
				tgo.UserIdUlid = new(string)
				*tgo.UserIdUlid = value.String
			}
		case tblgarageowner.FieldInitial:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Initial", values[i])
			} else if value.Valid {
				tgo.Initial = new(int)
				*tgo.Initial = int(value.Int64)
			}
		case tblgarageowner.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FirstName", values[i])
			} else if value.Valid {
				tgo.FirstName = value.String
			}
		case tblgarageowner.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MiddleName", values[i])
			} else if value.Valid {
				tgo.MiddleName = new(string)
				*tgo.MiddleName = value.String
			}
		case tblgarageowner.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field LastName", values[i])
			} else if value.Valid {
				tgo.LastName = value.String
			}
		case tblgarageowner.FieldContactNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ContactNumber", values[i])
			} else if value.Valid {
				tgo.ContactNumber = value.String
			}
		case tblgarageowner.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				tgo.Email = new(string)
				*tgo.Email = value.String
			}
		case tblgarageowner.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Age", values[i])
			} else if value.Valid {
				tgo.Age = new(int)
				*tgo.Age = int(value.Int64)
			}
		case tblgarageowner.FieldPhotoIdUlid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PhotoId_ulid", values[i])
			} else if value.Valid {
				tgo.PhotoIdUlid = new(string)
				*tgo.PhotoIdUlid = value.String
			}
		case tblgarageowner.FieldAddressIdUlid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AddressId_ulid", values[i])
			} else if value.Valid {
				tgo.AddressIdUlid = value.String
			}
		default:
			tgo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblGarageOwner.
// This includes values selected through modifiers, order, etc.
func (tgo *TblGarageOwner) Value(name string) (ent.Value, error) {
	return tgo.selectValues.Get(name)
}

// QueryUser queries the "User" edge of the TblGarageOwner entity.
func (tgo *TblGarageOwner) QueryUser() *TblUSersQuery {
	return NewTblGarageOwnerClient(tgo.config).QueryUser(tgo)
}

// QueryNameInitial queries the "NameInitial" edge of the TblGarageOwner entity.
func (tgo *TblGarageOwner) QueryNameInitial() *TblEnumQuery {
	return NewTblGarageOwnerClient(tgo.config).QueryNameInitial(tgo)
}

// QueryOwnerPhoto queries the "OwnerPhoto" edge of the TblGarageOwner entity.
func (tgo *TblGarageOwner) QueryOwnerPhoto() *TblDocumentQuery {
	return NewTblGarageOwnerClient(tgo.config).QueryOwnerPhoto(tgo)
}

// QueryAddress queries the "Address" edge of the TblGarageOwner entity.
func (tgo *TblGarageOwner) QueryAddress() *TblAddressQuery {
	return NewTblGarageOwnerClient(tgo.config).QueryAddress(tgo)
}

// Update returns a builder for updating this TblGarageOwner.
// Note that you need to call TblGarageOwner.Unwrap() before calling this method if this TblGarageOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (tgo *TblGarageOwner) Update() *TblGarageOwnerUpdateOne {
	return NewTblGarageOwnerClient(tgo.config).UpdateOne(tgo)
}

// Unwrap unwraps the TblGarageOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tgo *TblGarageOwner) Unwrap() *TblGarageOwner {
	_tx, ok := tgo.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblGarageOwner is not a transactional entity")
	}
	tgo.config.driver = _tx.drv
	return tgo
}

// String implements the fmt.Stringer.
func (tgo *TblGarageOwner) String() string {
	var builder strings.Builder
	builder.WriteString("TblGarageOwner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tgo.ID))
	if v := tgo.CreatedBy; v != nil {
		builder.WriteString("CreatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.UpdatedBy; v != nil {
		builder.WriteString("UpdatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.DeletedBy; v != nil {
		builder.WriteString("DeletedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.IP; v != nil {
		builder.WriteString("IP=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.UserAgent; v != nil {
		builder.WriteString("UserAgent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(tgo.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(tgo.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tgo.DeletedAt; v != nil {
		builder.WriteString("DeletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tgo.UserIdUlid; v != nil {
		builder.WriteString("UserId_ulid=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.Initial; v != nil {
		builder.WriteString("Initial=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("FirstName=")
	builder.WriteString(tgo.FirstName)
	builder.WriteString(", ")
	if v := tgo.MiddleName; v != nil {
		builder.WriteString("MiddleName=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("LastName=")
	builder.WriteString(tgo.LastName)
	builder.WriteString(", ")
	builder.WriteString("ContactNumber=")
	builder.WriteString(tgo.ContactNumber)
	builder.WriteString(", ")
	if v := tgo.Email; v != nil {
		builder.WriteString("Email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tgo.Age; v != nil {
		builder.WriteString("Age=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tgo.PhotoIdUlid; v != nil {
		builder.WriteString("PhotoId_ulid=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("AddressId_ulid=")
	builder.WriteString(tgo.AddressIdUlid)
	builder.WriteByte(')')
	return builder.String()
}

// TblGarageOwners is a parsable slice of TblGarageOwner.
type TblGarageOwners []*TblGarageOwner
