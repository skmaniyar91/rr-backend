// Code generated by ent, DO NOT EDIT.

package tbladdress

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tbladdress type in the database.
	Label = "tbl_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_ulid"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "CreatedBy"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "UpdatedBy"
	// FieldDeletedBy holds the string denoting the deletedby field in the database.
	FieldDeletedBy = "DeletedBy"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "IP"
	// FieldUserAgent holds the string denoting the useragent field in the database.
	FieldUserAgent = "UserAgent"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "CreatedAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "UpdatedAt"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "DeletedAt"
	// FieldLine1 holds the string denoting the line1 field in the database.
	FieldLine1 = "Line1"
	// FieldLine2 holds the string denoting the line2 field in the database.
	FieldLine2 = "Line2"
	// FieldLine3 holds the string denoting the line3 field in the database.
	FieldLine3 = "Line3"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "City"
	// FieldDistrict holds the string denoting the district field in the database.
	FieldDistrict = "District"
	// FieldSubDistrict holds the string denoting the subdistrict field in the database.
	FieldSubDistrict = "SubDistrict"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "State"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "Country"
	// FieldPostalCode holds the string denoting the postalcode field in the database.
	FieldPostalCode = "PostalCode"
	// EdgeOwnerAddress holds the string denoting the owneraddress edge name in mutations.
	EdgeOwnerAddress = "OwnerAddress"
	// Table holds the table name of the tbladdress in the database.
	Table = "Tbl_Address"
	// OwnerAddressTable is the table that holds the OwnerAddress relation/edge.
	OwnerAddressTable = "Tbl_GarageOwner"
	// OwnerAddressInverseTable is the table name for the TblGarageOwner entity.
	// It exists in this package in order to avoid circular dependency with the "tblgarageowner" package.
	OwnerAddressInverseTable = "Tbl_GarageOwner"
	// OwnerAddressColumn is the table column denoting the OwnerAddress relation/edge.
	OwnerAddressColumn = "Address"
)

// Columns holds all SQL columns for tbladdress fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldIP,
	FieldUserAgent,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldLine1,
	FieldLine2,
	FieldLine3,
	FieldCity,
	FieldDistrict,
	FieldSubDistrict,
	FieldState,
	FieldCountry,
	FieldPostalCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "rr-backend/ent/entgen/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	// CreatedByValidator is a validator for the "CreatedBy" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "UpdatedBy" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DeletedByValidator is a validator for the "DeletedBy" field. It is called by the builders before save.
	DeletedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// Line1Validator is a validator for the "Line1" field. It is called by the builders before save.
	Line1Validator func(string) error
	// Line2Validator is a validator for the "Line2" field. It is called by the builders before save.
	Line2Validator func(string) error
	// Line3Validator is a validator for the "Line3" field. It is called by the builders before save.
	Line3Validator func(string) error
	// CityValidator is a validator for the "City" field. It is called by the builders before save.
	CityValidator func(string) error
	// DistrictValidator is a validator for the "District" field. It is called by the builders before save.
	DistrictValidator func(string) error
	// SubDistrictValidator is a validator for the "SubDistrict" field. It is called by the builders before save.
	SubDistrictValidator func(string) error
	// StateValidator is a validator for the "State" field. It is called by the builders before save.
	StateValidator func(string) error
	// CountryValidator is a validator for the "Country" field. It is called by the builders before save.
	CountryValidator func(string) error
	// PostalCodeValidator is a validator for the "PostalCode" field. It is called by the builders before save.
	PostalCodeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the TblAddress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the DeletedBy field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByIP orders the results by the IP field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByUserAgent orders the results by the UserAgent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the DeletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByLine1 orders the results by the Line1 field.
func ByLine1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine1, opts...).ToFunc()
}

// ByLine2 orders the results by the Line2 field.
func ByLine2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine2, opts...).ToFunc()
}

// ByLine3 orders the results by the Line3 field.
func ByLine3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLine3, opts...).ToFunc()
}

// ByCity orders the results by the City field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByDistrict orders the results by the District field.
func ByDistrict(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistrict, opts...).ToFunc()
}

// BySubDistrict orders the results by the SubDistrict field.
func BySubDistrict(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubDistrict, opts...).ToFunc()
}

// ByState orders the results by the State field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCountry orders the results by the Country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByPostalCode orders the results by the PostalCode field.
func ByPostalCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostalCode, opts...).ToFunc()
}

// ByOwnerAddressField orders the results by OwnerAddress field.
func ByOwnerAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerAddressStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OwnerAddressTable, OwnerAddressColumn),
	)
}
