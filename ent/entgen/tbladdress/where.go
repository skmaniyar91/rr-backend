// Code generated by ent, DO NOT EDIT.

package tbladdress

import (
	"rr-backend/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldID, id))
}

// CreatedBy applies equality check predicate on the "CreatedBy" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "UpdatedBy" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedBy applies equality check predicate on the "DeletedBy" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDeletedBy, v))
}

// IP applies equality check predicate on the "IP" field. It's identical to IPEQ.
func IP(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldIP, v))
}

// UserAgent applies equality check predicate on the "UserAgent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUserAgent, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "DeletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// Line1 applies equality check predicate on the "Line1" field. It's identical to Line1EQ.
func Line1(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine1, v))
}

// Line2 applies equality check predicate on the "Line2" field. It's identical to Line2EQ.
func Line2(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine2, v))
}

// Line3 applies equality check predicate on the "Line3" field. It's identical to Line3EQ.
func Line3(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine3, v))
}

// City applies equality check predicate on the "City" field. It's identical to CityEQ.
func City(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCity, v))
}

// District applies equality check predicate on the "District" field. It's identical to DistrictEQ.
func District(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDistrict, v))
}

// SubDistrict applies equality check predicate on the "SubDistrict" field. It's identical to SubDistrictEQ.
func SubDistrict(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldSubDistrict, v))
}

// State applies equality check predicate on the "State" field. It's identical to StateEQ.
func State(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldState, v))
}

// Country applies equality check predicate on the "Country" field. It's identical to CountryEQ.
func Country(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCountry, v))
}

// PostalCode applies equality check predicate on the "PostalCode" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldPostalCode, v))
}

// CreatedByEQ applies the EQ predicate on the "CreatedBy" field.
func CreatedByEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "CreatedBy" field.
func CreatedByNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "CreatedBy" field.
func CreatedByIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "CreatedBy" field.
func CreatedByNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "CreatedBy" field.
func CreatedByGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "CreatedBy" field.
func CreatedByGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "CreatedBy" field.
func CreatedByLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "CreatedBy" field.
func CreatedByLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "CreatedBy" field.
func CreatedByContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "CreatedBy" field.
func CreatedByHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "CreatedBy" field.
func CreatedByHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "CreatedBy" field.
func CreatedByIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "CreatedBy" field.
func CreatedByNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "CreatedBy" field.
func CreatedByEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "CreatedBy" field.
func CreatedByContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "UpdatedBy" field.
func UpdatedByEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "UpdatedBy" field.
func UpdatedByNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "UpdatedBy" field.
func UpdatedByIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "UpdatedBy" field.
func UpdatedByNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "UpdatedBy" field.
func UpdatedByGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "UpdatedBy" field.
func UpdatedByGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "UpdatedBy" field.
func UpdatedByLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "UpdatedBy" field.
func UpdatedByLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "UpdatedBy" field.
func UpdatedByContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "UpdatedBy" field.
func UpdatedByHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "UpdatedBy" field.
func UpdatedByHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "UpdatedBy" field.
func UpdatedByIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "UpdatedBy" field.
func UpdatedByNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "UpdatedBy" field.
func UpdatedByEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "UpdatedBy" field.
func UpdatedByContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedByEQ applies the EQ predicate on the "DeletedBy" field.
func DeletedByEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "DeletedBy" field.
func DeletedByNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "DeletedBy" field.
func DeletedByIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "DeletedBy" field.
func DeletedByNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "DeletedBy" field.
func DeletedByGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "DeletedBy" field.
func DeletedByGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "DeletedBy" field.
func DeletedByLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "DeletedBy" field.
func DeletedByLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "DeletedBy" field.
func DeletedByContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "DeletedBy" field.
func DeletedByHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "DeletedBy" field.
func DeletedByHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "DeletedBy" field.
func DeletedByIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "DeletedBy" field.
func DeletedByNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "DeletedBy" field.
func DeletedByEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "DeletedBy" field.
func DeletedByContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldDeletedBy, v))
}

// IPEQ applies the EQ predicate on the "IP" field.
func IPEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "IP" field.
func IPNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "IP" field.
func IPIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "IP" field.
func IPNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "IP" field.
func IPGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "IP" field.
func IPGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "IP" field.
func IPLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "IP" field.
func IPLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "IP" field.
func IPContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "IP" field.
func IPHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "IP" field.
func IPHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldIP, v))
}

// IPIsNil applies the IsNil predicate on the "IP" field.
func IPIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldIP))
}

// IPNotNil applies the NotNil predicate on the "IP" field.
func IPNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldIP))
}

// IPEqualFold applies the EqualFold predicate on the "IP" field.
func IPEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "IP" field.
func IPContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldIP, v))
}

// UserAgentEQ applies the EQ predicate on the "UserAgent" field.
func UserAgentEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "UserAgent" field.
func UserAgentNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "UserAgent" field.
func UserAgentIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "UserAgent" field.
func UserAgentNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "UserAgent" field.
func UserAgentGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "UserAgent" field.
func UserAgentGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "UserAgent" field.
func UserAgentLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "UserAgent" field.
func UserAgentLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "UserAgent" field.
func UserAgentContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "UserAgent" field.
func UserAgentHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "UserAgent" field.
func UserAgentHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "UserAgent" field.
func UserAgentIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "UserAgent" field.
func UserAgentNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "UserAgent" field.
func UserAgentEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "UserAgent" field.
func UserAgentContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldUserAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "DeletedAt" field.
func DeletedAtEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "DeletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "DeletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "DeletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "DeletedAt" field.
func DeletedAtGT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "DeletedAt" field.
func DeletedAtGTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "DeletedAt" field.
func DeletedAtLT(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "DeletedAt" field.
func DeletedAtLTE(v time.Time) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "DeletedAt" field.
func DeletedAtIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "DeletedAt" field.
func DeletedAtNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldDeletedAt))
}

// Line1EQ applies the EQ predicate on the "Line1" field.
func Line1EQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine1, v))
}

// Line1NEQ applies the NEQ predicate on the "Line1" field.
func Line1NEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldLine1, v))
}

// Line1In applies the In predicate on the "Line1" field.
func Line1In(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldLine1, vs...))
}

// Line1NotIn applies the NotIn predicate on the "Line1" field.
func Line1NotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldLine1, vs...))
}

// Line1GT applies the GT predicate on the "Line1" field.
func Line1GT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldLine1, v))
}

// Line1GTE applies the GTE predicate on the "Line1" field.
func Line1GTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldLine1, v))
}

// Line1LT applies the LT predicate on the "Line1" field.
func Line1LT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldLine1, v))
}

// Line1LTE applies the LTE predicate on the "Line1" field.
func Line1LTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldLine1, v))
}

// Line1Contains applies the Contains predicate on the "Line1" field.
func Line1Contains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldLine1, v))
}

// Line1HasPrefix applies the HasPrefix predicate on the "Line1" field.
func Line1HasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldLine1, v))
}

// Line1HasSuffix applies the HasSuffix predicate on the "Line1" field.
func Line1HasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldLine1, v))
}

// Line1EqualFold applies the EqualFold predicate on the "Line1" field.
func Line1EqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldLine1, v))
}

// Line1ContainsFold applies the ContainsFold predicate on the "Line1" field.
func Line1ContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldLine1, v))
}

// Line2EQ applies the EQ predicate on the "Line2" field.
func Line2EQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine2, v))
}

// Line2NEQ applies the NEQ predicate on the "Line2" field.
func Line2NEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldLine2, v))
}

// Line2In applies the In predicate on the "Line2" field.
func Line2In(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldLine2, vs...))
}

// Line2NotIn applies the NotIn predicate on the "Line2" field.
func Line2NotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldLine2, vs...))
}

// Line2GT applies the GT predicate on the "Line2" field.
func Line2GT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldLine2, v))
}

// Line2GTE applies the GTE predicate on the "Line2" field.
func Line2GTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldLine2, v))
}

// Line2LT applies the LT predicate on the "Line2" field.
func Line2LT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldLine2, v))
}

// Line2LTE applies the LTE predicate on the "Line2" field.
func Line2LTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldLine2, v))
}

// Line2Contains applies the Contains predicate on the "Line2" field.
func Line2Contains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldLine2, v))
}

// Line2HasPrefix applies the HasPrefix predicate on the "Line2" field.
func Line2HasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldLine2, v))
}

// Line2HasSuffix applies the HasSuffix predicate on the "Line2" field.
func Line2HasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldLine2, v))
}

// Line2IsNil applies the IsNil predicate on the "Line2" field.
func Line2IsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldLine2))
}

// Line2NotNil applies the NotNil predicate on the "Line2" field.
func Line2NotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldLine2))
}

// Line2EqualFold applies the EqualFold predicate on the "Line2" field.
func Line2EqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldLine2, v))
}

// Line2ContainsFold applies the ContainsFold predicate on the "Line2" field.
func Line2ContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldLine2, v))
}

// Line3EQ applies the EQ predicate on the "Line3" field.
func Line3EQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldLine3, v))
}

// Line3NEQ applies the NEQ predicate on the "Line3" field.
func Line3NEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldLine3, v))
}

// Line3In applies the In predicate on the "Line3" field.
func Line3In(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldLine3, vs...))
}

// Line3NotIn applies the NotIn predicate on the "Line3" field.
func Line3NotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldLine3, vs...))
}

// Line3GT applies the GT predicate on the "Line3" field.
func Line3GT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldLine3, v))
}

// Line3GTE applies the GTE predicate on the "Line3" field.
func Line3GTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldLine3, v))
}

// Line3LT applies the LT predicate on the "Line3" field.
func Line3LT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldLine3, v))
}

// Line3LTE applies the LTE predicate on the "Line3" field.
func Line3LTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldLine3, v))
}

// Line3Contains applies the Contains predicate on the "Line3" field.
func Line3Contains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldLine3, v))
}

// Line3HasPrefix applies the HasPrefix predicate on the "Line3" field.
func Line3HasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldLine3, v))
}

// Line3HasSuffix applies the HasSuffix predicate on the "Line3" field.
func Line3HasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldLine3, v))
}

// Line3IsNil applies the IsNil predicate on the "Line3" field.
func Line3IsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldLine3))
}

// Line3NotNil applies the NotNil predicate on the "Line3" field.
func Line3NotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldLine3))
}

// Line3EqualFold applies the EqualFold predicate on the "Line3" field.
func Line3EqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldLine3, v))
}

// Line3ContainsFold applies the ContainsFold predicate on the "Line3" field.
func Line3ContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldLine3, v))
}

// CityEQ applies the EQ predicate on the "City" field.
func CityEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "City" field.
func CityNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "City" field.
func CityIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "City" field.
func CityNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "City" field.
func CityGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "City" field.
func CityGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "City" field.
func CityLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "City" field.
func CityLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "City" field.
func CityContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "City" field.
func CityHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "City" field.
func CityHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "City" field.
func CityEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "City" field.
func CityContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldCity, v))
}

// DistrictEQ applies the EQ predicate on the "District" field.
func DistrictEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldDistrict, v))
}

// DistrictNEQ applies the NEQ predicate on the "District" field.
func DistrictNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldDistrict, v))
}

// DistrictIn applies the In predicate on the "District" field.
func DistrictIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldDistrict, vs...))
}

// DistrictNotIn applies the NotIn predicate on the "District" field.
func DistrictNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldDistrict, vs...))
}

// DistrictGT applies the GT predicate on the "District" field.
func DistrictGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldDistrict, v))
}

// DistrictGTE applies the GTE predicate on the "District" field.
func DistrictGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldDistrict, v))
}

// DistrictLT applies the LT predicate on the "District" field.
func DistrictLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldDistrict, v))
}

// DistrictLTE applies the LTE predicate on the "District" field.
func DistrictLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldDistrict, v))
}

// DistrictContains applies the Contains predicate on the "District" field.
func DistrictContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldDistrict, v))
}

// DistrictHasPrefix applies the HasPrefix predicate on the "District" field.
func DistrictHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldDistrict, v))
}

// DistrictHasSuffix applies the HasSuffix predicate on the "District" field.
func DistrictHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldDistrict, v))
}

// DistrictIsNil applies the IsNil predicate on the "District" field.
func DistrictIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldDistrict))
}

// DistrictNotNil applies the NotNil predicate on the "District" field.
func DistrictNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldDistrict))
}

// DistrictEqualFold applies the EqualFold predicate on the "District" field.
func DistrictEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldDistrict, v))
}

// DistrictContainsFold applies the ContainsFold predicate on the "District" field.
func DistrictContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldDistrict, v))
}

// SubDistrictEQ applies the EQ predicate on the "SubDistrict" field.
func SubDistrictEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldSubDistrict, v))
}

// SubDistrictNEQ applies the NEQ predicate on the "SubDistrict" field.
func SubDistrictNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldSubDistrict, v))
}

// SubDistrictIn applies the In predicate on the "SubDistrict" field.
func SubDistrictIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldSubDistrict, vs...))
}

// SubDistrictNotIn applies the NotIn predicate on the "SubDistrict" field.
func SubDistrictNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldSubDistrict, vs...))
}

// SubDistrictGT applies the GT predicate on the "SubDistrict" field.
func SubDistrictGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldSubDistrict, v))
}

// SubDistrictGTE applies the GTE predicate on the "SubDistrict" field.
func SubDistrictGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldSubDistrict, v))
}

// SubDistrictLT applies the LT predicate on the "SubDistrict" field.
func SubDistrictLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldSubDistrict, v))
}

// SubDistrictLTE applies the LTE predicate on the "SubDistrict" field.
func SubDistrictLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldSubDistrict, v))
}

// SubDistrictContains applies the Contains predicate on the "SubDistrict" field.
func SubDistrictContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldSubDistrict, v))
}

// SubDistrictHasPrefix applies the HasPrefix predicate on the "SubDistrict" field.
func SubDistrictHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldSubDistrict, v))
}

// SubDistrictHasSuffix applies the HasSuffix predicate on the "SubDistrict" field.
func SubDistrictHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldSubDistrict, v))
}

// SubDistrictIsNil applies the IsNil predicate on the "SubDistrict" field.
func SubDistrictIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldSubDistrict))
}

// SubDistrictNotNil applies the NotNil predicate on the "SubDistrict" field.
func SubDistrictNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldSubDistrict))
}

// SubDistrictEqualFold applies the EqualFold predicate on the "SubDistrict" field.
func SubDistrictEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldSubDistrict, v))
}

// SubDistrictContainsFold applies the ContainsFold predicate on the "SubDistrict" field.
func SubDistrictContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldSubDistrict, v))
}

// StateEQ applies the EQ predicate on the "State" field.
func StateEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "State" field.
func StateNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "State" field.
func StateIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "State" field.
func StateNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "State" field.
func StateGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "State" field.
func StateGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "State" field.
func StateLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "State" field.
func StateLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "State" field.
func StateContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "State" field.
func StateHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "State" field.
func StateHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "State" field.
func StateEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "State" field.
func StateContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldState, v))
}

// CountryEQ applies the EQ predicate on the "Country" field.
func CountryEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "Country" field.
func CountryNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "Country" field.
func CountryIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "Country" field.
func CountryNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "Country" field.
func CountryGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "Country" field.
func CountryGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "Country" field.
func CountryLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "Country" field.
func CountryLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "Country" field.
func CountryContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "Country" field.
func CountryHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "Country" field.
func CountryHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "Country" field.
func CountryEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "Country" field.
func CountryContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldCountry, v))
}

// PostalCodeEQ applies the EQ predicate on the "PostalCode" field.
func PostalCodeEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEQ(FieldPostalCode, v))
}

// PostalCodeNEQ applies the NEQ predicate on the "PostalCode" field.
func PostalCodeNEQ(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNEQ(FieldPostalCode, v))
}

// PostalCodeIn applies the In predicate on the "PostalCode" field.
func PostalCodeIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIn(FieldPostalCode, vs...))
}

// PostalCodeNotIn applies the NotIn predicate on the "PostalCode" field.
func PostalCodeNotIn(vs ...string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotIn(FieldPostalCode, vs...))
}

// PostalCodeGT applies the GT predicate on the "PostalCode" field.
func PostalCodeGT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGT(FieldPostalCode, v))
}

// PostalCodeGTE applies the GTE predicate on the "PostalCode" field.
func PostalCodeGTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldGTE(FieldPostalCode, v))
}

// PostalCodeLT applies the LT predicate on the "PostalCode" field.
func PostalCodeLT(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLT(FieldPostalCode, v))
}

// PostalCodeLTE applies the LTE predicate on the "PostalCode" field.
func PostalCodeLTE(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldLTE(FieldPostalCode, v))
}

// PostalCodeContains applies the Contains predicate on the "PostalCode" field.
func PostalCodeContains(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContains(FieldPostalCode, v))
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "PostalCode" field.
func PostalCodeHasPrefix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasPrefix(FieldPostalCode, v))
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "PostalCode" field.
func PostalCodeHasSuffix(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldHasSuffix(FieldPostalCode, v))
}

// PostalCodeIsNil applies the IsNil predicate on the "PostalCode" field.
func PostalCodeIsNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldIsNull(FieldPostalCode))
}

// PostalCodeNotNil applies the NotNil predicate on the "PostalCode" field.
func PostalCodeNotNil() predicate.TblAddress {
	return predicate.TblAddress(sql.FieldNotNull(FieldPostalCode))
}

// PostalCodeEqualFold applies the EqualFold predicate on the "PostalCode" field.
func PostalCodeEqualFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldEqualFold(FieldPostalCode, v))
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "PostalCode" field.
func PostalCodeContainsFold(v string) predicate.TblAddress {
	return predicate.TblAddress(sql.FieldContainsFold(FieldPostalCode, v))
}

// HasOwnerAddress applies the HasEdge predicate on the "OwnerAddress" edge.
func HasOwnerAddress() predicate.TblAddress {
	return predicate.TblAddress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, OwnerAddressTable, OwnerAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerAddressWith applies the HasEdge predicate on the "OwnerAddress" edge with a given conditions (other predicates).
func HasOwnerAddressWith(preds ...predicate.TblGarageOwner) predicate.TblAddress {
	return predicate.TblAddress(func(s *sql.Selector) {
		step := newOwnerAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TblAddress) predicate.TblAddress {
	return predicate.TblAddress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TblAddress) predicate.TblAddress {
	return predicate.TblAddress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TblAddress) predicate.TblAddress {
	return predicate.TblAddress(sql.NotPredicates(p))
}
