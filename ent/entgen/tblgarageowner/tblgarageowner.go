// Code generated by ent, DO NOT EDIT.

package tblgarageowner

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblgarageowner type in the database.
	Label = "tbl_garage_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_ulid"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "CreatedBy"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "UpdatedBy"
	// FieldDeletedBy holds the string denoting the deletedby field in the database.
	FieldDeletedBy = "DeletedBy"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "IP"
	// FieldUserAgent holds the string denoting the useragent field in the database.
	FieldUserAgent = "UserAgent"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "CreatedAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "UpdatedAt"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "DeletedAt"
	// FieldUserIdUlid holds the string denoting the userid_ulid field in the database.
	FieldUserIdUlid = "UserId_ulid"
	// FieldInitial holds the string denoting the initial field in the database.
	FieldInitial = "Initial"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "FirstName"
	// FieldMiddleName holds the string denoting the middlename field in the database.
	FieldMiddleName = "MiddleName"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "LastName"
	// FieldContactNumber holds the string denoting the contactnumber field in the database.
	FieldContactNumber = "ContactNumber"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "Email"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "Age"
	// FieldPhotoIdUlid holds the string denoting the photoid_ulid field in the database.
	FieldPhotoIdUlid = "Photo"
	// FieldAddressIdUlid holds the string denoting the addressid_ulid field in the database.
	FieldAddressIdUlid = "Address"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// EdgeNameInitial holds the string denoting the nameinitial edge name in mutations.
	EdgeNameInitial = "NameInitial"
	// EdgeOwnerPhoto holds the string denoting the ownerphoto edge name in mutations.
	EdgeOwnerPhoto = "OwnerPhoto"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "Address"
	// TblEnumFieldID holds the string denoting the ID field of the TblEnum.
	TblEnumFieldID = "id"
	// Table holds the table name of the tblgarageowner in the database.
	Table = "Tbl_GarageOwner"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "Tbl_GarageOwner"
	// UserInverseTable is the table name for the TblUSers entity.
	// It exists in this package in order to avoid circular dependency with the "tblusers" package.
	UserInverseTable = "Tbl_Users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "UserId_ulid"
	// NameInitialTable is the table that holds the NameInitial relation/edge.
	NameInitialTable = "Tbl_GarageOwner"
	// NameInitialInverseTable is the table name for the TblEnum entity.
	// It exists in this package in order to avoid circular dependency with the "tblenum" package.
	NameInitialInverseTable = "Tbl_Enum"
	// NameInitialColumn is the table column denoting the NameInitial relation/edge.
	NameInitialColumn = "Initial"
	// OwnerPhotoTable is the table that holds the OwnerPhoto relation/edge.
	OwnerPhotoTable = "Tbl_GarageOwner"
	// OwnerPhotoInverseTable is the table name for the TblDocument entity.
	// It exists in this package in order to avoid circular dependency with the "tbldocument" package.
	OwnerPhotoInverseTable = "Tbl_Document"
	// OwnerPhotoColumn is the table column denoting the OwnerPhoto relation/edge.
	OwnerPhotoColumn = "Photo"
	// AddressTable is the table that holds the Address relation/edge.
	AddressTable = "Tbl_GarageOwner"
	// AddressInverseTable is the table name for the TblAddress entity.
	// It exists in this package in order to avoid circular dependency with the "tbladdress" package.
	AddressInverseTable = "Tbl_Address"
	// AddressColumn is the table column denoting the Address relation/edge.
	AddressColumn = "Address"
)

// Columns holds all SQL columns for tblgarageowner fields.
var Columns = []string{
	FieldID,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
	FieldIP,
	FieldUserAgent,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldUserIdUlid,
	FieldInitial,
	FieldFirstName,
	FieldMiddleName,
	FieldLastName,
	FieldContactNumber,
	FieldEmail,
	FieldAge,
	FieldPhotoIdUlid,
	FieldAddressIdUlid,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "rr-backend/ent/entgen/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	// CreatedByValidator is a validator for the "CreatedBy" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// UpdatedByValidator is a validator for the "UpdatedBy" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
	// DeletedByValidator is a validator for the "DeletedBy" field. It is called by the builders before save.
	DeletedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UserIdUlidValidator is a validator for the "UserId_ulid" field. It is called by the builders before save.
	UserIdUlidValidator func(string) error
	// FirstNameValidator is a validator for the "FirstName" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// MiddleNameValidator is a validator for the "MiddleName" field. It is called by the builders before save.
	MiddleNameValidator func(string) error
	// LastNameValidator is a validator for the "LastName" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// ContactNumberValidator is a validator for the "ContactNumber" field. It is called by the builders before save.
	ContactNumberValidator func(string) error
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PhotoIdUlidValidator is a validator for the "PhotoId_ulid" field. It is called by the builders before save.
	PhotoIdUlidValidator func(string) error
	// AddressIdUlidValidator is a validator for the "AddressId_ulid" field. It is called by the builders before save.
	AddressIdUlidValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the TblGarageOwner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the DeletedBy field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByIP orders the results by the IP field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByUserAgent orders the results by the UserAgent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the DeletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByUserIdUlid orders the results by the UserId_ulid field.
func ByUserIdUlid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserIdUlid, opts...).ToFunc()
}

// ByInitial orders the results by the Initial field.
func ByInitial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitial, opts...).ToFunc()
}

// ByFirstName orders the results by the FirstName field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByMiddleName orders the results by the MiddleName field.
func ByMiddleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByLastName orders the results by the LastName field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByContactNumber orders the results by the ContactNumber field.
func ByContactNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactNumber, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAge orders the results by the Age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByPhotoIdUlid orders the results by the PhotoId_ulid field.
func ByPhotoIdUlid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhotoIdUlid, opts...).ToFunc()
}

// ByAddressIdUlid orders the results by the AddressId_ulid field.
func ByAddressIdUlid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressIdUlid, opts...).ToFunc()
}

// ByUserField orders the results by User field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByNameInitialField orders the results by NameInitial field.
func ByNameInitialField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNameInitialStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerPhotoField orders the results by OwnerPhoto field.
func ByOwnerPhotoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerPhotoStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressField orders the results by Address field.
func ByAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}
func newNameInitialStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NameInitialInverseTable, TblEnumFieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, NameInitialTable, NameInitialColumn),
	)
}
func newOwnerPhotoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerPhotoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OwnerPhotoTable, OwnerPhotoColumn),
	)
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AddressTable, AddressColumn),
	)
}
