// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"rr-backend/ent/entgen/tblenum"
	"rr-backend/ent/entgen/tblgarageowner"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblEnum is the model entity for the TblEnum schema.
type TblEnum struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy *string `json:"CreatedBy,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy *string `json:"UpdatedBy,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy *string `json:"DeletedBy,omitempty"`
	// IP holds the value of the "IP" field.
	IP *string `json:"IP,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent *string `json:"UserAgent,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// DeletedAt holds the value of the "DeletedAt" field.
	DeletedAt *time.Time `json:"DeletedAt,omitempty"`
	// Code holds the value of the "Code" field.
	Code string `json:"Code,omitempty"`
	// CodeType holds the value of the "CodeType" field.
	CodeType string `json:"CodeType,omitempty"`
	// DisplayText holds the value of the "DisplayText" field.
	DisplayText string `json:"DisplayText,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblEnumQuery when eager-loading is set.
	Edges        TblEnumEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblEnumEdges holds the relations/edges for other nodes in the graph.
type TblEnumEdges struct {
	// InitialEnum holds the value of the InitialEnum edge.
	InitialEnum *TblGarageOwner `json:"InitialEnum,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InitialEnumOrErr returns the InitialEnum value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblEnumEdges) InitialEnumOrErr() (*TblGarageOwner, error) {
	if e.InitialEnum != nil {
		return e.InitialEnum, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tblgarageowner.Label}
	}
	return nil, &NotLoadedError{edge: "InitialEnum"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblEnum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblenum.FieldID:
			values[i] = new(sql.NullInt64)
		case tblenum.FieldCreatedBy, tblenum.FieldUpdatedBy, tblenum.FieldDeletedBy, tblenum.FieldIP, tblenum.FieldUserAgent, tblenum.FieldCode, tblenum.FieldCodeType, tblenum.FieldDisplayText:
			values[i] = new(sql.NullString)
		case tblenum.FieldCreatedAt, tblenum.FieldUpdatedAt, tblenum.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblEnum fields.
func (te *TblEnum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblenum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			te.ID = int(value.Int64)
		case tblenum.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				te.CreatedBy = new(string)
				*te.CreatedBy = value.String
			}
		case tblenum.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				te.UpdatedBy = new(string)
				*te.UpdatedBy = value.String
			}
		case tblenum.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				te.DeletedBy = new(string)
				*te.DeletedBy = value.String
			}
		case tblenum.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field IP", values[i])
			} else if value.Valid {
				te.IP = new(string)
				*te.IP = value.String
			}
		case tblenum.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				te.UserAgent = new(string)
				*te.UserAgent = value.String
			}
		case tblenum.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				te.CreatedAt = value.Time
			}
		case tblenum.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				te.UpdatedAt = value.Time
			}
		case tblenum.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedAt", values[i])
			} else if value.Valid {
				te.DeletedAt = new(time.Time)
				*te.DeletedAt = value.Time
			}
		case tblenum.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Code", values[i])
			} else if value.Valid {
				te.Code = value.String
			}
		case tblenum.FieldCodeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CodeType", values[i])
			} else if value.Valid {
				te.CodeType = value.String
			}
		case tblenum.FieldDisplayText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DisplayText", values[i])
			} else if value.Valid {
				te.DisplayText = value.String
			}
		default:
			te.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblEnum.
// This includes values selected through modifiers, order, etc.
func (te *TblEnum) Value(name string) (ent.Value, error) {
	return te.selectValues.Get(name)
}

// QueryInitialEnum queries the "InitialEnum" edge of the TblEnum entity.
func (te *TblEnum) QueryInitialEnum() *TblGarageOwnerQuery {
	return NewTblEnumClient(te.config).QueryInitialEnum(te)
}

// Update returns a builder for updating this TblEnum.
// Note that you need to call TblEnum.Unwrap() before calling this method if this TblEnum
// was returned from a transaction, and the transaction was committed or rolled back.
func (te *TblEnum) Update() *TblEnumUpdateOne {
	return NewTblEnumClient(te.config).UpdateOne(te)
}

// Unwrap unwraps the TblEnum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (te *TblEnum) Unwrap() *TblEnum {
	_tx, ok := te.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblEnum is not a transactional entity")
	}
	te.config.driver = _tx.drv
	return te
}

// String implements the fmt.Stringer.
func (te *TblEnum) String() string {
	var builder strings.Builder
	builder.WriteString("TblEnum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", te.ID))
	if v := te.CreatedBy; v != nil {
		builder.WriteString("CreatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.UpdatedBy; v != nil {
		builder.WriteString("UpdatedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.DeletedBy; v != nil {
		builder.WriteString("DeletedBy=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.IP; v != nil {
		builder.WriteString("IP=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := te.UserAgent; v != nil {
		builder.WriteString("UserAgent=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(te.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(te.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := te.DeletedAt; v != nil {
		builder.WriteString("DeletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("Code=")
	builder.WriteString(te.Code)
	builder.WriteString(", ")
	builder.WriteString("CodeType=")
	builder.WriteString(te.CodeType)
	builder.WriteString(", ")
	builder.WriteString("DisplayText=")
	builder.WriteString(te.DisplayText)
	builder.WriteByte(')')
	return builder.String()
}

// TblEnums is a parsable slice of TblEnum.
type TblEnums []*TblEnum
